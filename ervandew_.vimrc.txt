" Author: Eric Van Dewoestine

" vim options {{{

  " disable vi compatability mode. Must be first option.
  set nocompatible

  if &term =~ '^\(rxvt-unicode\|.*256color\)' || has('gui_running')
    colorscheme dark     " set the color scheme
  endif

  set autoindent       " always set autoindenting on
  set backspace=2      " backspace over indent, eol, start
  set background=dark  " set the background to dark
  set cedit=<esc>      " <esc> on the command (:) mode goes to command edit.
  set complete-=i      " exclude include files
  set complete-=t      " exclude tags
  set complete-=u      " exclude unloaded buffers
  set completeopt=menuone,longest,preview
  set display=lastline " if last line doesn't fit on screen, show as much as possible.
  set expandtab        " expand tabs to spaces
  set fillchars=vert:\ ,fold:-
  set formatoptions+=n " support formatting of numbered lists.
  set history=50       " keep 50 lines of command line history
  set hlsearch         " highlight all search matches
  set incsearch        " do incremental searching
  set laststatus=2     " always show the status line.
  " show all tabs as >- and tailing spaces as -
  set list listchars=precedes:<,extends:>,tab:>-,trail:-
  set nobackup         " do not keep a backup file
  set number           " show line numbers
  " set the printer name to use (see http://localhost:631/printers/)
  "set printdevice=<name>
  " set printing to use US paper, to have syntax, line numbers and wrap text.
  set printoptions=paper:letter,syntax:a,number:y,wrap:y
  set ruler            " show the cursor position all the time
  set scrolloff=5      " always keep 5 lines of context around the cursor
  set shiftwidth=2     " number of spaces used by indenting
  set showcmd          " display incomplete commands
  set spellsuggest=10  " limit number of spelling suggestions to 10.
  set sidescroll=10    " minimum number of columns to scroll
  set sidescrolloff=20 " always keep 10 columns of horizontal context
  set splitbelow       " default :split to split files below the current window.
  set splitright       " default :vsplit to split files to the right of the current window.
  set ssop+=globals    " save global variables (required by some plugins to restore from session).
  set switchbuf=useopen,usetab
  " set the strings used for the tabline
  set tabline=%!TabLine()
  set tabstop=2        " set the default tab width
  set timeoutlen=500   " timeout on mappings in .5 second
  set updatetime=1000  " timeout in millis for CursorHold event and swap writting.
  set visualbell t_vb= " turn off system beeps and visual flash
  set wildignore+=*.pyc,*.pyo,__pycache__/**
  set wildmenu         " for command completion, show menu of available results
  " for command completion, show menu of available results
  set wildmode=longest:full,full
  set wrap             " wrap text

  set statusline=%<%f%{FF()}\ %M\ %h%r%=%-10.(%l,%c%V\ b=%n,w=%{winnr()}%)\ %P
  function! FF()
    return &ff == 'unix'  ?  ''  :  ' [' . &ff . ']'
  endfunction

  if has("autocmd")
    " clear any existing autocmds (must be before turning syntax on)
    autocmd!

    " ftplugin + indent support
    filetype plugin indent on

    " syntax highlighting
    if &t_Co > 2 || has("gui_running")
      syntax on

      " rxvt-unicode supports changing the cursor color on the fly.
      if &term =~ '^rxvt-\(unicode\|256color\)'
        set t_Co=256
        let &t_SI = "\<Esc>]12;#bebebe\x7" " gray
        let &t_EI = "\<Esc>]12;#ac7d00\x7" " dark orange

      elseif &term =~ 'rxvt'
        " 16 colors for rxvt (:h color-xterm)
        set t_Co=16
        "let &t_AB="\<ESC>[%?%p1%{8}%<%t25;%p1%{40}%+%e5;%p1%{32}%+%;%dm"
        "let &t_AF="\<ESC>[%?%p1%{8}%<%t22;%p1%{30}%+%e1;%p1%{22}%+%;%dm"
      endif
    endif
  endif

  function! TabLine()
    let line = ''
    for i in range(tabpagenr('$'))
      let n = i + 1
      " select the highlighting
      let line .= tabpagenr() == n ? '%#TabLineSel#' : '%#TabLine#'

      " create the tab label
      let buflist = tabpagebuflist(n)
      let winnr = tabpagewinnr(n)
      let name = fnamemodify(bufname(buflist[winnr - 1]), ':t')
      let status = gettabwinvar(n, winnr, '&statusline')
      if status =~ '^\w\{3,}'
        let name = status
      endif
      let line .= ' %{"' . (name != '' ? name : '[No Name]') . '"} '
      if n > 0 && n != tabpagenr('$')
        let line .= '%#TabLine# | '
      endif
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let line .= '%#TabLineFill#%T'
    return line
  endfunction
" }}}

" mappings {{{

  " sets the value of <Leader>
  let mapleader=","

  " scrolling just the viewpane
  nnoremap <c-j> <c-e>
  nnoremap <c-k> <c-y>

  " navigate windows
  nnoremap <silent> <tab><tab> :winc p<cr>
  nnoremap <silent> <tab>j :winc j<cr>
  nnoremap <silent> <tab>k :winc k<cr>
  nnoremap <silent> <tab>l :winc l<cr>
  nnoremap <silent> <tab>h :winc h<cr>
  nnoremap <silent> <tab>m :winc x<cr>

  " swap j/k gj/jk to help navigate long wrapped lines by default
  nnoremap <silent> j :UpDown gj<cr>
  nnoremap <silent> k :UpDown gk<cr>
  nnoremap <silent> gj j
  nnoremap <silent> gk k
  xnoremap <silent> j gj
  xnoremap <silent> k gk
  command! -nargs=? -count=1 UpDown
    \ :let c = <count> |
    \ :let c = c > 1 ? c - line('.') + 1 : c |
    \ :exec 'normal! ' . c . '<args>'

  " back tick works like single quote for jumping to a mark, but restores the
  " column position too.
  nnoremap ' `

  " map Y and D to put the text on the clipboard and primary x selection.
  vnoremap <silent> Y "*y:let @+ = @"<cr>
  vnoremap <silent> D "*d:let @+ = @"<cr>

  " redraw screen + clear search highlights + update diffs
  nnoremap <silent> <c-l> :nohl \| diffu<cr><c-l>
  nnoremap <silent> <c-l><c-l> :syn sync minlines=100<cr>

  " mappings to jump to the nearest { or }
  nnoremap {{ [{
  nnoremap }} ]}

  " toggle wrapping of text
  nmap <silent> <leader>w :let &wrap = !&wrap<cr>

  " toggle diff of the current buffer
  nmap <expr> <leader>d &diff ? ":diffoff\<cr>" : ":diffthis\<cr>"

  " write and go to next quickfix/location list result
  nmap <leader>cn :call <SID>NextError('c', 0)<cr>
  nmap <leader>cf :call <SID>NextError('c', 1)<cr>
  nmap <leader>ln :call <SID>NextError('l', 0)<cr>
  nmap <leader>lf :call <SID>NextError('l', 1)<cr>
  function! s:NextError(list, nextfile) " {{{
    let error_count = (a:list == 'c') ? len(getqflist()) : len(getloclist(0))
    noautocmd silent update
    let command = a:list . 'nfile'
    if !a:nextfile
      " check new error count to handle case where writing the file modifies
      " the results.
      let length = (a:list == 'c') ? len(getqflist()) : len(getloclist(0))
      let command = (length == error_count) ? a:list . 'next' : a:list . a:list
    endif
    exec command
  endfunction " }}}

  " resize windows w/ arrow keys
  nnoremap <silent> <up> :resize +3<cr>
  nnoremap <silent> <down> :resize -3<cr>
  nnoremap <silent> <left> :vertical resize -3<cr>
  nnoremap <silent> <right> :vertical resize +3<cr>

  " allow g. to move back through the change list (like the single use '.)
  nnoremap <silent> g. g;

  nnoremap <silent> gh :tabprev<cr>
  nnoremap <silent> gl :tabnext<cr>
  nnoremap <silent> gH :exec 'tabmove ' . max([tabpagenr() - 2, 0])<cr>
  nnoremap <silent> gL :exec 'tabmove ' . min([tabpagenr(), tabpagenr('$')])<cr>
  nnoremap <silent> g0 :tabfirst<cr>
  nnoremap <silent> g$ :tablast<cr>

  " gF is the same as gf + supports jumping to line number (file:100)
  nnoremap gf gF
  " map gF now to be the new window version of original gF
  nnoremap gF <c-w>F

  " toggle spelling with <F10> (normal or insert mode)
  nnoremap <silent> <F10>
    \ :setlocal spell! spelllang=en_us \|
    \ :echohl Statement \| echo 'spell check ' . (&spell ? 'on' : 'off') \| echohl None<cr>
  imap <F10> <c-o><F10>

  " Make p in Visual mode replace the selected text with the " register.
  xnoremap p <esc>:let reg = @"<cr>gvs<c-r>=reg<cr><esc>

" }}}

" commands {{{

  command! Messages messages

  command! -nargs=0 Copen :botright copen
  command! -nargs=0 COpen :botright copen
  command! -nargs=0 Lopen :botright lopen
  command! -nargs=0 LOpen :botright lopen

  " print the syntax name applied to the text under the cursor.
  command! -nargs=0 Syntax
    \ echohl Statement |
    \ let id = synID(line('.'), col('.'), 1) |
    \ echo 'name: ' .  synIDattr(id, "name") |
    \ echo 'base: ' .  synIDattr(synIDtrans(id), "name") |
    \ echohl None

  command! -nargs=0 -range=% FormatJson :call <SID>FormatJson(<line1>, <line2>)
  function! s:FormatJson(line1, line2) " {{{
    let line1 = a:line1
    let line2 = a:line2

    if line2 < line1
      let line1 = a:line2
      let line2 = a:line1
    endif
    exec line1 . ',' . line2 . 's/\n//g'
    exec line1 . ',' . line1 .
      \ '!python -c "import json, sys; ' .
      \ 'json.dump(json.load(sys.stdin), sys.stdout, sort_keys=True, indent=4)"'
  endfunction " }}}

" }}}

" autocommands {{{
  if has("autocmd")
    " For various events, check whether the file has been changed by another
    " process.
    autocmd InsertEnter,WinEnter *
      \ if &buftype == '' && filereadable(expand('%')) |
      \   exec 'checktime ' . bufnr('%') |
      \ endif

    " when editing a file, jump to the last known cursor position.
    autocmd BufReadPost * silent! exec 'normal g`"'

    " disallow writing to read only files
    autocmd BufNewFile,BufRead * :let &modifiable = !&readonly

    " only highlight cursor line of the current window.
    if &term =~ '^\(rxvt-unicode\|.*256color\)' || has('gui_running')
      autocmd WinLeave * setlocal nocursorline
      autocmd CursorHold,WinEnter *
        \ exec 'setlocal ' . (&ft == 'qf' ? 'no' : '') . 'cursorline'
    endif
  endif
" }}}

" vim:ft=vim:fdm=marker