*** mutt-1.5.20-1/buffy.c	2013-02-06 16:53:49.556191700 -0500
--- mutt-1.5.20-1-patched/buffy.c	2013-02-07 09:42:27.776230100 -0500
***************
*** 161,166 ****
--- 161,209 ----
    }
  }
  
+ static int buffy_compare_name(const void *a, const void *b) {
+   const BUFFY *b1 = * (BUFFY * const *) a;
+   const BUFFY *b2 = * (BUFFY * const *) b;
+ 
+   return mutt_strcoll(b1->path, b2->path);
+ }
+ 
+ static BUFFY *buffy_sort(BUFFY *b)
+ {
+   BUFFY *tmp = b;
+   int buffycount = 0;
+   BUFFY **ary;
+   int i;
+ 
+   if (!option(OPTSIDEBARSORT))
+     return b;
+ 
+   for (; tmp != NULL; tmp = tmp->next)
+     buffycount++;
+ 
+   ary = (BUFFY **) safe_calloc(buffycount, sizeof (*ary));
+ 
+   tmp = b;
+   for (i = 0; tmp != NULL; tmp = tmp->next, i++) {
+     ary[i] = tmp;
+   }
+ 
+   qsort(ary, buffycount, sizeof(*ary), buffy_compare_name);
+ 
+   for (i = 0; i < buffycount - 1; i++) {
+     ary[i]->next = ary[i+1];
+   }
+   ary[buffycount - 1]->next = NULL;
+   for (i = 1; i < buffycount; i++) {
+     ary[i]->prev = ary[i-1];
+   }
+   ary[0]->prev = NULL;
+ 
+   tmp = ary[0];
+   free(ary);
+   return tmp;
+ }
+ 
  BUFFY *mutt_find_mailbox (const char *path)
  {
    BUFFY *tmp = NULL;
***************
*** 282,287 ****
--- 325,331 ----
      else
        (*tmp)->size = 0;
    }
+   Incoming = buffy_sort(Incoming);
    return 0;
  }
  
***************
*** 302,307 ****
--- 346,355 ----
      return 0;
    }
  
+   mailbox->msgcount = 0;
+   mailbox->msg_unread = 0;
+   mailbox->msg_flagged = 0;
+ 
    while ((de = readdir (dirp)) != NULL)
    {
      if (*de->d_name == '.')
***************
*** 309,315 ****
  
      if (!(p = strstr (de->d_name, ":2,")) || !strchr (p + 3, 'T')) {
        /* one new and undeleted message is enough */
!       mailbox->new = 1;
        rc = 1;
        break;
      }
--- 357,365 ----
  
      if (!(p = strstr (de->d_name, ":2,")) || !strchr (p + 3, 'T')) {
        /* one new and undeleted message is enough */
!       mailbox->has_new = mailbox->new = 1;
!       mailbox->msgcount++;
!       mailbox->msg_unread++;
        rc = 1;
        break;
      }
***************
*** 317,322 ****
--- 367,399 ----
  
    closedir (dirp);
  
+   /*
+    * count read messages (for folderlist (sidebar) we also need to count
+    * messages in cur so that we the total number of messages
+    */
+   snprintf (path, sizeof (path), "%s/cur", mailbox->path);
+   if ((dirp = opendir (path)) == NULL)
+   {
+     mailbox->magic = 0;
+     return rc;
+   }
+   while ((de = readdir (dirp)) != NULL)
+   {
+     if (*de->d_name != '.') {
+       if ((p = strstr (de->d_name, ":2,"))) {
+         if (!strchr (p + 3, 'T')) {
+           mailbox->msgcount++;
+           if ( !strchr (p + 3, 'S'))
+             mailbox->msg_unread++;
+           if (strchr(p + 3, 'F'))
+             mailbox->msg_flagged++;
+         }
+       } else
+         mailbox->msgcount++;
+     }
+   }
+   closedir (dirp);
+ 
    return rc;
  }
  
***************
*** 354,359 ****
--- 431,439 ----
    struct stat sb;
    struct stat contex_sb;
    time_t t;
+   //CONTEXT *ctx;
+   struct dirent *de;
+   char path[_POSIX_PATH_MAX];
  
    sb.st_size=0;
    contex_sb.st_dev=0;
***************
*** 390,395 ****
--- 470,477 ----
    
    for (tmp = Incoming; tmp; tmp = tmp->next)
    {
+     if ( tmp->new == 1 )
+       tmp->has_new = 1;
      if (tmp->magic != M_IMAP)
        tmp->new = 0;
  
***************
*** 433,440 ****
--- 515,539 ----
  	break;
  
        case M_MH:
+       {
+         DIR *dp;
          if ((tmp->new = mh_buffy (tmp->path)) > 0)
            BuffyCount++;
+ 
+         if ((dp = opendir (path)) == NULL)
+           break;
+         tmp->msgcount = 0;
+         while ((de = readdir (dp)))
+         {
+           if (mh_valid_message (de->d_name))
+           {
+             tmp->msgcount++;
+             tmp->has_new = tmp->new = 1;
+           }
+         }
+         closedir (dp);
+       }
+ 
          break;
        }
        }
*** mutt-1.5.20-1/buffy.h	2013-02-06 16:53:49.556191700 -0500
--- mutt-1.5.20-1-patched/buffy.h	2013-02-06 16:41:20.320651000 -0500
***************
*** 25,31 ****
--- 25,36 ----
    char path[_POSIX_PATH_MAX];
    off_t size;
    struct buffy_t *next;
+   struct buffy_t *prev;
    short new;			/* mailbox has new mail */
+   short has_new;		/* set it new if new and not read */
+   int msgcount;			/* total number of messages */
+   int msg_unread;		/* number of unread messages */
+   int msg_flagged;		/* number of flagged messages */
    short notified;		/* user has been notified */
    short magic;			/* mailbox type */
    short newly_created;		/* mbox or mmdf just popped into existence */
*** mutt-1.5.20-1/color.c	2013-02-06 16:53:49.566191800 -0500
--- mutt-1.5.20-1-patched/color.c	2013-02-06 16:41:20.330651100 -0500
***************
*** 93,98 ****
--- 93,100 ----
    { "bold",		MT_COLOR_BOLD },
    { "underline",	MT_COLOR_UNDERLINE },
    { "index",		MT_COLOR_INDEX },
+   { "sidebar_new",	MT_COLOR_NEW },
+   { "sidebar_flagged",	MT_COLOR_FLAGGED },
    { NULL,		0 }
  };
  
*** mutt-1.5.20-1/compose.c	2013-02-06 16:53:49.576191900 -0500
--- mutt-1.5.20-1-patched/compose.c	2013-02-06 16:41:20.330651100 -0500
***************
*** 72,78 ****
  
  #define HDR_XOFFSET 10
  #define TITLE_FMT "%10s" /* Used for Prompts, which are ASCII */
! #define W (COLS - HDR_XOFFSET)
  
  static char *Prompts[] =
  {
--- 72,78 ----
  
  #define HDR_XOFFSET 10
  #define TITLE_FMT "%10s" /* Used for Prompts, which are ASCII */
! #define W (COLS - HDR_XOFFSET - SidebarWidth)
  
  static char *Prompts[] =
  {
***************
*** 115,130 ****
    if ((WithCrypto & APPLICATION_PGP) && (WithCrypto & APPLICATION_SMIME))
    {     
      if (!msg->security)
!       mvaddstr (HDR_CRYPT, 0,     "Security: ");
      else if (msg->security & APPLICATION_SMIME)
!       mvaddstr (HDR_CRYPT, 0,     "  S/MIME: ");
      else if (msg->security & APPLICATION_PGP)
!       mvaddstr (HDR_CRYPT, 0,     "     PGP: ");
    }
    else if ((WithCrypto & APPLICATION_SMIME))
!     mvaddstr (HDR_CRYPT, 0,     "  S/MIME: ");
    else if ((WithCrypto & APPLICATION_PGP))
!     mvaddstr (HDR_CRYPT, 0,     "     PGP: ");
    else
      return;
  
--- 115,130 ----
    if ((WithCrypto & APPLICATION_PGP) && (WithCrypto & APPLICATION_SMIME))
    {     
      if (!msg->security)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "Security: ");
      else if (msg->security & APPLICATION_SMIME)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "  S/MIME: ");
      else if (msg->security & APPLICATION_PGP)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "     PGP: ");
    }
    else if ((WithCrypto & APPLICATION_SMIME))
!     mvaddstr (HDR_CRYPT, SidebarWidth,     "  S/MIME: ");
    else if ((WithCrypto & APPLICATION_PGP))
!     mvaddstr (HDR_CRYPT, SidebarWidth,     "     PGP: ");
    else
      return;
  
***************
*** 148,154 ****
      }
    clrtoeol ();
  
!   move (HDR_CRYPTINFO, 0);
    clrtoeol ();
    if ((WithCrypto & APPLICATION_PGP)
        && msg->security & APPLICATION_PGP  && msg->security & SIGN)
--- 148,154 ----
      }
    clrtoeol ();
  
!   move (HDR_CRYPTINFO, SidebarWidth);
    clrtoeol ();
    if ((WithCrypto & APPLICATION_PGP)
        && msg->security & APPLICATION_PGP  && msg->security & SIGN)
***************
*** 164,170 ****
        && (msg->security & ENCRYPT)
        && SmimeCryptAlg
        && *SmimeCryptAlg) {
!       mvprintw (HDR_CRYPTINFO, 40, "%s%s", _("Encrypt with: "),
  		NONULL(SmimeCryptAlg));
        off = 20;
    }
--- 164,170 ----
        && (msg->security & ENCRYPT)
        && SmimeCryptAlg
        && *SmimeCryptAlg) {
!       mvprintw (HDR_CRYPTINFO, SidebarWidth + 40, "%s%s", _("Encrypt with: "),
  		NONULL(SmimeCryptAlg));
        off = 20;
    }
***************
*** 178,184 ****
    int c;
    char *t;
  
!   mvaddstr (HDR_MIX, 0,     "     Mix: ");
  
    if (!chain)
    {
--- 178,184 ----
    int c;
    char *t;
  
!   mvaddstr (HDR_MIX, SidebarWidth,     "     Mix: ");
  
    if (!chain)
    {
***************
*** 193,199 ****
      if (t && t[0] == '0' && t[1] == '\0')
        t = "<random>";
      
!     if (c + mutt_strlen (t) + 2 >= COLS)
        break;
  
      addstr (NONULL(t));
--- 193,199 ----
      if (t && t[0] == '0' && t[1] == '\0')
        t = "<random>";
      
!     if (c + mutt_strlen (t) + 2 >= COLS - SidebarWidth)
        break;
  
      addstr (NONULL(t));
***************
*** 245,251 ****
  
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), addr, 1);
!   mvprintw (line, 0, TITLE_FMT, Prompts[line - 1]);
    mutt_paddstr (W, buf);
  }
  
--- 245,251 ----
  
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), addr, 1);
!   mvprintw (line, SidebarWidth, TITLE_FMT, Prompts[line - 1]);
    mutt_paddstr (W, buf);
  }
  
***************
*** 255,264 ****
    draw_envelope_addr (HDR_TO, msg->env->to);
    draw_envelope_addr (HDR_CC, msg->env->cc);
    draw_envelope_addr (HDR_BCC, msg->env->bcc);
!   mvprintw (HDR_SUBJECT, 0, TITLE_FMT, Prompts[HDR_SUBJECT - 1]);
    mutt_paddstr (W, NONULL (msg->env->subject));
    draw_envelope_addr (HDR_REPLYTO, msg->env->reply_to);
!   mvprintw (HDR_FCC, 0, TITLE_FMT, Prompts[HDR_FCC - 1]);
    mutt_paddstr (W, fcc);
  
    if (WithCrypto)
--- 255,264 ----
    draw_envelope_addr (HDR_TO, msg->env->to);
    draw_envelope_addr (HDR_CC, msg->env->cc);
    draw_envelope_addr (HDR_BCC, msg->env->bcc);
!   mvprintw (HDR_SUBJECT, SidebarWidth, TITLE_FMT, Prompts[HDR_SUBJECT - 1]);
    mutt_paddstr (W, NONULL (msg->env->subject));
    draw_envelope_addr (HDR_REPLYTO, msg->env->reply_to);
!   mvprintw (HDR_FCC, SidebarWidth, TITLE_FMT, Prompts[HDR_FCC - 1]);
    mutt_paddstr (W, fcc);
  
    if (WithCrypto)
***************
*** 269,275 ****
  #endif
  
    SETCOLOR (MT_COLOR_STATUS);
!   mvaddstr (HDR_ATTACH - 1, 0, _("-- Attachments"));
    BKGDSET (MT_COLOR_STATUS);
    clrtoeol ();
  
--- 269,275 ----
  #endif
  
    SETCOLOR (MT_COLOR_STATUS);
!   mvaddstr (HDR_ATTACH - 1, SidebarWidth, _("-- Attachments"));
    BKGDSET (MT_COLOR_STATUS);
    clrtoeol ();
  
***************
*** 307,313 ****
    /* redraw the expanded list so the user can see the result */
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), *addr, 1);
!   move (line, HDR_XOFFSET);
    mutt_paddstr (W, buf);
    
    return 0;
--- 307,313 ----
    /* redraw the expanded list so the user can see the result */
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), *addr, 1);
!   move (line, HDR_XOFFSET+SidebarWidth);
    mutt_paddstr (W, buf);
    
    return 0;
***************
*** 552,558 ****
  	if (mutt_get_field ("Subject: ", buf, sizeof (buf), 0) == 0)
  	{
  	  mutt_str_replace (&msg->env->subject, buf);
! 	  move (HDR_SUBJECT, HDR_XOFFSET);
  	  clrtoeol ();
  	  if (msg->env->subject)
  	    mutt_paddstr (W, msg->env->subject);
--- 552,558 ----
  	if (mutt_get_field ("Subject: ", buf, sizeof (buf), 0) == 0)
  	{
  	  mutt_str_replace (&msg->env->subject, buf);
! 	  move (HDR_SUBJECT, HDR_XOFFSET + SidebarWidth);
  	  clrtoeol ();
  	  if (msg->env->subject)
  	    mutt_paddstr (W, msg->env->subject);
***************
*** 569,575 ****
  	{
  	  strfcpy (fcc, buf, fcclen);
  	  mutt_pretty_mailbox (fcc, fcclen);
! 	  move (HDR_FCC, HDR_XOFFSET);
  	  mutt_paddstr (W, fcc);
  	  fccSet = 1;
  	}
--- 569,575 ----
  	{
  	  strfcpy (fcc, buf, fcclen);
  	  mutt_pretty_mailbox (fcc, fcclen);
! 	  move (HDR_FCC, HDR_XOFFSET + SidebarWidth);
  	  mutt_paddstr (W, fcc);
  	  fccSet = 1;
  	}
*** mutt-1.5.20-1/curs_main.c	2013-02-06 16:53:49.736193500 -0500
--- mutt-1.5.20-1-patched/curs_main.c	2013-02-06 16:41:20.340651200 -0500
***************
*** 26,32 ****
--- 26,34 ----
  #include "mailbox.h"
  #include "mapping.h"
  #include "sort.h"
+ #include "buffy.h"
  #include "mx.h"
+ #include "sidebar.h"
  
  #ifdef USE_POP
  #include "pop.h"
***************
*** 523,531 ****
         menu->redraw |= REDRAW_STATUS;
       if (do_buffy_notify)
       {
!        if (mutt_buffy_notify () && option (OPTBEEPNEW))
   	beep ();
       }
       else
         do_buffy_notify = 1;
      }
--- 525,537 ----
         menu->redraw |= REDRAW_STATUS;
       if (do_buffy_notify)
       {
!        if (mutt_buffy_notify ())
!        {
!          menu->redraw |= REDRAW_FULL;
!          if (option (OPTBEEPNEW))
             beep ();
         }
+      }
       else
         do_buffy_notify = 1;
      }
***************
*** 536,541 ****
--- 542,548 ----
      if (menu->redraw & REDRAW_FULL)
      {
        menu_redraw_full (menu);
+       draw_sidebar(menu->menu);
        mutt_show_error ();
      }
  
***************
*** 558,567 ****
--- 565,577 ----
  
        if (menu->redraw & REDRAW_STATUS)
        {
+         DrawFullLine = 1;
  	menu_status_line (buf, sizeof (buf), menu, NONULL (Status));
+         DrawFullLine = 0;
  	CLEARLINE (option (OPTSTATUSONTOP) ? 0 : LINES-2);
  	SETCOLOR (MT_COLOR_STATUS);
          BKGDSET (MT_COLOR_STATUS);
+         set_buffystats(Context);
  	mutt_paddstr (COLS, buf);
  	SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
***************
*** 575,581 ****
  	menu->oldcurrent = -1;
  
        if (option (OPTARROWCURSOR))
! 	move (menu->current - menu->top + menu->offset, 2);
        else if (option (OPTBRAILLEFRIENDLY))
  	move (menu->current - menu->top + menu->offset, 0);
        else
--- 585,591 ----
  	menu->oldcurrent = -1;
  
        if (option (OPTARROWCURSOR))
! 	move (menu->current - menu->top + menu->offset, SidebarWidth + 2);
        else if (option (OPTBRAILLEFRIENDLY))
  	move (menu->current - menu->top + menu->offset, 0);
        else
***************
*** 1055,1060 ****
--- 1065,1071 ----
  	  menu->redraw = REDRAW_FULL;
  	break;
  
+       case OP_SIDEBAR_OPEN:
        case OP_MAIN_CHANGE_FOLDER:
        case OP_MAIN_NEXT_UNREAD_MAILBOX:
  
***************
*** 1086,1092 ****
  	{
  	  mutt_buffy (buf, sizeof (buf));
  
! 	  if (mutt_enter_fname (cp, buf, sizeof (buf), &menu->redraw, 1) == -1)
  	  {
  	    if (menu->menu == MENU_PAGER)
  	    {
--- 1097,1107 ----
  	{
  	  mutt_buffy (buf, sizeof (buf));
  
!           if ( op == OP_SIDEBAR_OPEN ) {
!               if(!CurBuffy)
!                 break;
!             strncpy( buf, CurBuffy->path, sizeof(buf) );  
! 	    } else if (mutt_enter_fname (cp, buf, sizeof (buf), &menu->redraw, 1) == -1)
  	  {
  	    if (menu->menu == MENU_PAGER)
  	    {
***************
*** 1104,1109 ****
--- 1119,1125 ----
  	}
  
  	mutt_expand_path (buf, sizeof (buf));
+         set_curbuffy(buf);
  	if (mx_get_magic (buf) <= 0)
  	{
  	  mutt_error (_("%s is not a mailbox."), buf);
***************
*** 2189,2194 ****
--- 2205,2216 ----
  	mutt_what_key();
  	break;
  
+       case OP_SIDEBAR_SCROLL_UP:
+       case OP_SIDEBAR_SCROLL_DOWN:
+       case OP_SIDEBAR_NEXT:
+       case OP_SIDEBAR_PREV:
+         scroll_sidebar(op, menu->menu);
+         break;
        default:
  	if (menu->menu == MENU_MAIN)
  	  km_error_key (MENU_MAIN);
*** mutt-1.5.20-1/flags.c	2013-02-06 16:53:49.786194000 -0500
--- mutt-1.5.20-1-patched/flags.c	2013-02-06 16:41:20.340651200 -0500
***************
*** 22,29 ****
--- 22,31 ----
  
  #include "mutt.h"
  #include "mutt_curses.h"
+ #include "mutt_menu.h"
  #include "sort.h"
  #include "mx.h"
+ #include "sidebar.h"
  
  void _mutt_set_flag (CONTEXT *ctx, HEADER *h, int flag, int bf, int upd_ctx)
  {
***************
*** 263,268 ****
--- 265,271 ----
     */
    if (h->searched && (changed != h->changed || deleted != ctx->deleted || tagged != ctx->tagged || flagged != ctx->flagged))
      h->searched = 0;
+ 	draw_sidebar(0);
  }
  
  void mutt_tag_set_flag (int flag, int bf)
*** mutt-1.5.20-1/functions.h	2013-02-06 16:53:49.786194000 -0500
--- mutt-1.5.20-1-patched/functions.h	2013-02-06 16:41:20.350651300 -0500
***************
*** 168,173 ****
--- 168,178 ----
    { "decrypt-save",		OP_DECRYPT_SAVE,		NULL },
  
  
+  { "sidebar-scroll-up",	OP_SIDEBAR_SCROLL_UP, NULL },
+  { "sidebar-scroll-down",	OP_SIDEBAR_SCROLL_DOWN, NULL },
+  { "sidebar-next",		OP_SIDEBAR_NEXT, NULL },
+  { "sidebar-prev",		OP_SIDEBAR_PREV, NULL },
+  { "sidebar-open",		OP_SIDEBAR_OPEN, NULL },
    { NULL,			0,				NULL }
  };
  
***************
*** 268,273 ****
--- 273,283 ----
  
    { "what-key",		OP_WHAT_KEY,		NULL },
  
+   { "sidebar-scroll-up",	OP_SIDEBAR_SCROLL_UP, NULL },
+   { "sidebar-scroll-down",	OP_SIDEBAR_SCROLL_DOWN, NULL },
+   { "sidebar-next",	OP_SIDEBAR_NEXT, NULL },
+   { "sidebar-prev",	OP_SIDEBAR_PREV, NULL },
+   { "sidebar-open", OP_SIDEBAR_OPEN, NULL },
    { NULL,		0,				NULL }
  };
  
*** mutt-1.5.20-1/globals.h	2013-02-06 16:53:49.796194100 -0500
--- mutt-1.5.20-1-patched/globals.h	2013-02-06 16:41:20.350651300 -0500
***************
*** 117,122 ****
--- 117,123 ----
  WHERE char *SendCharset;
  WHERE char *Sendmail;
  WHERE char *Shell;
+ WHERE char *SidebarDelim;
  WHERE char *Signature;
  WHERE char *SimpleSearch;
  #if USE_SMTP
***************
*** 207,212 ****
--- 208,216 ----
  WHERE short ScoreThresholdRead;
  WHERE short ScoreThresholdFlag;
  
+ WHERE struct buffy_t *CurBuffy INITVAL(0);
+ WHERE short DrawFullLine INITVAL(0);
+ WHERE short SidebarWidth;
  #ifdef USE_IMAP
  WHERE short ImapKeepalive;
  WHERE short ImapPipelineDepth;
*** mutt-1.5.20-1/init.h	2013-02-06 16:53:49.846194600 -0500
--- mutt-1.5.20-1-patched/init.h	2013-02-06 16:41:20.360651400 -0500
***************
*** 1941,1946 ****
--- 1941,1967 ----
    ** not used.
    ** (PGP only)
    */
+   {"sidebar_delim", DT_STR, R_BOTH, UL &SidebarDelim, "|"},
+   /*
+   ** .pp
+   ** This specifies the delimiter between the sidebar (if visible) and 
+   ** other screens.
+   */
+   { "sidebar_visible", DT_BOOL, R_BOTH, OPTSIDEBAR, 0 },
+   /*
+   ** .pp
+   ** This specifies whether or not to show sidebar (left-side list of folders).
+   */
+   { "sidebar_sort", DT_BOOL, R_BOTH, OPTSIDEBARSORT, 0 },
+   /*
+   ** .pp
+   ** This specifies whether or not to sort the sidebar alphabetically.
+   */
+   { "sidebar_width", DT_NUM, R_BOTH, UL &SidebarWidth, 0 },
+   /*
+   ** .pp
+   ** The width of the sidebar.
+   */
    { "pgp_use_gpg_agent", DT_BOOL, R_NONE, OPTUSEGPGAGENT, 0},
    /*
    ** .pp
*** mutt-1.5.20-1/mailbox.h	2013-02-06 16:53:49.926195400 -0500
--- mutt-1.5.20-1-patched/mailbox.h	2013-02-06 16:41:20.370651500 -0500
***************
*** 27,32 ****
--- 27,33 ----
  #define M_NEWFOLDER	(1<<4) /* create a new folder - same as M_APPEND, but uses
  				* safe_fopen() for mbox-style folders.
  				*/
+ #define M_PEEK		(1<<5) /* revert atime back after taking a look (if applicable) */
  
  /* mx_open_new_message() */
  #define M_ADD_FROM	1	/* add a From_ line */
*** mutt-1.5.20-1/Makefile.am	2013-02-06 16:53:49.926195400 -0500
--- mutt-1.5.20-1-patched/Makefile.am	2013-02-06 16:41:20.370651500 -0500
***************
*** 33,39 ****
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c mbyte.c \
! 	url.c ascii.c crypt-mod.c crypt-mod.h
  
  nodist_mutt_SOURCES = $(BUILT_SOURCES)
  
--- 33,40 ----
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c mbyte.c \
! 	url.c ascii.c crypt-mod.c crypt-mod.h \
!         sidebar.c
  
  nodist_mutt_SOURCES = $(BUILT_SOURCES)
  
*** mutt-1.5.20-1/Makefile.in	2013-02-06 16:53:49.936195500 -0500
--- mutt-1.5.20-1-patched/Makefile.in	2013-02-07 09:35:48.072158400 -0500
***************
*** 1,9 ****
! # Makefile.in generated by automake 1.11.1 from Makefile.am.
  # @configure_input@
  
  # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
! # 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
! # Inc.
  # This Makefile.in is free software; the Free Software Foundation
  # gives unlimited permission to copy and/or distribute it,
  # with or without modifications, as long as this notice is preserved.
--- 1,9 ----
! # Makefile.in generated by automake 1.11.6 from Makefile.am.
  # @configure_input@
  
  # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
! # 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
! # Foundation, Inc.
  # This Makefile.in is free software; the Free Software Foundation
  # gives unlimited permission to copy and/or distribute it,
  # with or without modifications, as long as this notice is preserved.
***************
*** 17,22 ****
--- 17,39 ----
  
  
  VPATH = @srcdir@
+ am__make_dryrun = \
+   { \
+     am__dry=no; \
+     case $$MAKEFLAGS in \
+       *\\[\ \	]*) \
+         echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+           | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+       *) \
+         for am__flg in $$MAKEFLAGS; do \
+           case $$am__flg in \
+             *=*|--*) ;; \
+             *n*) am__dry=yes; break;; \
+           esac; \
+         done;; \
+     esac; \
+     test $$am__dry = yes; \
+   }
  pkgdatadir = $(datadir)/@PACKAGE@
  pkgincludedir = $(includedir)/@PACKAGE@
  pkglibdir = $(libdir)/@PACKAGE@
***************
*** 39,53 ****
  	pgpewrap$(EXEEXT) mutt_md5$(EXEEXT)
  bin_PROGRAMS = mutt$(EXEEXT) @DOTLOCK_TARGET@ @PGPAUX_TARGET@
  subdir = .
! DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \
! 	$(srcdir)/../config.sub $(srcdir)/../depcomp \
! 	$(srcdir)/../install-sh $(srcdir)/../missing \
! 	$(srcdir)/../mkinstalldirs $(srcdir)/Makefile.am \
  	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
  	$(srcdir)/hcachever.sh.in $(srcdir)/muttbug.sh.in \
  	$(top_srcdir)/configure $(top_srcdir)/intl/Makefile.in \
! 	ABOUT-NLS ChangeLog INSTALL NEWS TODO mkdtemp.c mkinstalldirs \
! 	regex.c setenv.c snprintf.c strcasecmp.c strcasestr.c strdup.c \
  	strsep.c strtok_r.c wcscasecmp.c
  ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
  am__aclocal_m4_deps = $(top_srcdir)/m4/codeset.m4 \
--- 56,68 ----
  	pgpewrap$(EXEEXT) mutt_md5$(EXEEXT)
  bin_PROGRAMS = mutt$(EXEEXT) @DOTLOCK_TARGET@ @PGPAUX_TARGET@
  subdir = .
! DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
  	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
  	$(srcdir)/hcachever.sh.in $(srcdir)/muttbug.sh.in \
  	$(top_srcdir)/configure $(top_srcdir)/intl/Makefile.in \
! 	ABOUT-NLS ChangeLog INSTALL NEWS TODO config.guess config.sub \
! 	depcomp install-sh missing mkdtemp.c mkinstalldirs regex.c \
! 	setenv.c snprintf.c strcasecmp.c strcasestr.c strdup.c \
  	strsep.c strtok_r.c wcscasecmp.c
  ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
  am__aclocal_m4_deps = $(top_srcdir)/m4/codeset.m4 \
***************
*** 61,67 ****
  	$(ACLOCAL_M4)
  am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   configure.lineno config.status.lineno
! mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs
  CONFIG_HEADER = config.h
  CONFIG_CLEAN_FILES = intl/Makefile hcachever.sh muttbug.sh
  CONFIG_CLEAN_VPATH_FILES =
--- 76,82 ----
  	$(ACLOCAL_M4)
  am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   configure.lineno config.status.lineno
! mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
  CONFIG_HEADER = config.h
  CONFIG_CLEAN_FILES = intl/Makefile hcachever.sh muttbug.sh
  CONFIG_CLEAN_VPATH_FILES =
***************
*** 87,93 ****
  	system.$(OBJEXT) thread.$(OBJEXT) charset.$(OBJEXT) \
  	history.$(OBJEXT) lib.$(OBJEXT) muttlib.$(OBJEXT) \
  	editmsg.$(OBJEXT) mbyte.$(OBJEXT) url.$(OBJEXT) \
! 	ascii.$(OBJEXT) crypt-mod.$(OBJEXT)
  am__objects_1 =
  am__objects_2 = patchlist.$(OBJEXT) $(am__objects_1)
  nodist_mutt_OBJECTS = $(am__objects_2)
--- 102,108 ----
  	system.$(OBJEXT) thread.$(OBJEXT) charset.$(OBJEXT) \
  	history.$(OBJEXT) lib.$(OBJEXT) muttlib.$(OBJEXT) \
  	editmsg.$(OBJEXT) mbyte.$(OBJEXT) url.$(OBJEXT) \
! 	ascii.$(OBJEXT) crypt-mod.$(OBJEXT) sidebar.$(OBJEXT)
  am__objects_1 =
  am__objects_2 = patchlist.$(OBJEXT) $(am__objects_1)
  nodist_mutt_OBJECTS = $(am__objects_2)
***************
*** 129,137 ****
  am__base_list = \
    sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
    sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
  SCRIPTS = $(bin_SCRIPTS)
  DEFAULT_INCLUDES = -I.@am__isrc@
! depcomp = $(SHELL) $(top_srcdir)/../depcomp
  am__depfiles_maybe = depfiles
  am__mv = mv -f
  COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
--- 144,158 ----
  am__base_list = \
    sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
    sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
+ am__uninstall_files_from_dir = { \
+   test -z "$$files" \
+     || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
+     || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
+          $(am__cd) "$$dir" && rm -f $$files; }; \
+   }
  SCRIPTS = $(bin_SCRIPTS)
  DEFAULT_INCLUDES = -I.@am__isrc@
! depcomp = $(SHELL) $(top_srcdir)/depcomp
  am__depfiles_maybe = depfiles
  am__mv = mv -f
  COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
***************
*** 151,156 ****
--- 172,182 ----
  	install-pdf-recursive install-ps-recursive install-recursive \
  	installcheck-recursive installdirs-recursive pdf-recursive \
  	ps-recursive uninstall-recursive
+ am__can_run_installinfo = \
+   case $$AM_UPDATE_INFO_DIR in \
+     n|no|NO) false;; \
+     *) (install-info --version) >/dev/null 2>&1;; \
+   esac
  RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
    distclean-recursive maintainer-clean-recursive
  AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
***************
*** 163,171 ****
  distdir = $(PACKAGE)-$(VERSION)
  top_distdir = $(distdir)
  am__remove_distdir = \
!   { test ! -d "$(distdir)" \
!     || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
!          && rm -fr "$(distdir)"; }; }
  am__relativize = \
    dir0=`pwd`; \
    sed_first='s,^\([^/]*\)/.*$$,\1,'; \
--- 189,199 ----
  distdir = $(PACKAGE)-$(VERSION)
  top_distdir = $(distdir)
  am__remove_distdir = \
!   if test -d "$(distdir)"; then \
!     find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
!       && rm -rf "$(distdir)" \
!       || { sleep 5 && rm -rf "$(distdir)"; }; \
!   else :; fi
  am__relativize = \
    dir0=`pwd`; \
    sed_first='s,^\([^/]*\)/.*$$,\1,'; \
***************
*** 194,199 ****
--- 222,229 ----
  DIST_ARCHIVES = $(distdir).tar.gz
  GZIP_ENV = --best
  distuninstallcheck_listfiles = find . -type f -print
+ am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \
+   | sed 's|^\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'
  distcleancheck_listfiles = find . -type f -print
  ACLOCAL = @ACLOCAL@
  ALLOCA = @ALLOCA@
***************
*** 361,367 ****
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c mbyte.c \
! 	url.c ascii.c crypt-mod.c crypt-mod.h
  
  nodist_mutt_SOURCES = $(BUILT_SOURCES)
  mutt_LDADD = @MUTT_LIB_OBJECTS@ @LIBOBJS@ $(LIBIMAP) $(MUTTLIBS) \
--- 391,398 ----
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c mbyte.c \
! 	url.c ascii.c crypt-mod.c crypt-mod.h \
!         sidebar.c
  
  nodist_mutt_SOURCES = $(BUILT_SOURCES)
  mutt_LDADD = @MUTT_LIB_OBJECTS@ @LIBOBJS@ $(LIBIMAP) $(MUTTLIBS) \
***************
*** 415,421 ****
  
  .SUFFIXES:
  .SUFFIXES: .c .o .obj
! am--refresh:
  	@:
  $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
  	@for dep in $?; do \
--- 446,452 ----
  
  .SUFFIXES:
  .SUFFIXES: .c .o .obj
! am--refresh: Makefile
  	@:
  $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
  	@for dep in $?; do \
***************
*** 451,460 ****
  $(am__aclocal_m4_deps):
  
  config.h: stamp-h1
! 	@if test ! -f $@; then \
! 	  rm -f stamp-h1; \
! 	  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \
! 	else :; fi
  
  stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
  	@rm -f stamp-h1
--- 482,489 ----
  $(am__aclocal_m4_deps):
  
  config.h: stamp-h1
! 	@if test ! -f $@; then rm -f stamp-h1; else :; fi
! 	@if test ! -f $@; then $(MAKE) $(AM_MAKEFLAGS) stamp-h1; else :; fi
  
  stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
  	@rm -f stamp-h1
***************
*** 474,481 ****
  	cd $(top_builddir) && $(SHELL) ./config.status $@
  install-binPROGRAMS: $(bin_PROGRAMS)
  	@$(NORMAL_INSTALL)
- 	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
  	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
  	for p in $$list; do echo "$$p $$p"; done | \
  	sed 's/$(EXEEXT)$$//' | \
  	while read p p1; do if test -f $$p; \
--- 503,513 ----
  	cd $(top_builddir) && $(SHELL) ./config.status $@
  install-binPROGRAMS: $(bin_PROGRAMS)
  	@$(NORMAL_INSTALL)
  	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
+ 	if test -n "$$list"; then \
+ 	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
+ 	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
+ 	fi; \
  	for p in $$list; do echo "$$p $$p"; done | \
  	sed 's/$(EXEEXT)$$//' | \
  	while read p p1; do if test -f $$p; \
***************
*** 512,536 ****
  
  clean-noinstPROGRAMS:
  	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
! mutt$(EXEEXT): $(mutt_OBJECTS) $(mutt_DEPENDENCIES) 
  	@rm -f mutt$(EXEEXT)
  	$(LINK) $(mutt_OBJECTS) $(mutt_LDADD) $(LIBS)
! mutt_dotlock$(EXEEXT): $(mutt_dotlock_OBJECTS) $(mutt_dotlock_DEPENDENCIES) 
  	@rm -f mutt_dotlock$(EXEEXT)
  	$(LINK) $(mutt_dotlock_OBJECTS) $(mutt_dotlock_LDADD) $(LIBS)
! mutt_md5$(EXEEXT): $(mutt_md5_OBJECTS) $(mutt_md5_DEPENDENCIES) 
  	@rm -f mutt_md5$(EXEEXT)
  	$(mutt_md5_LINK) $(mutt_md5_OBJECTS) $(mutt_md5_LDADD) $(LIBS)
! pgpewrap$(EXEEXT): $(pgpewrap_OBJECTS) $(pgpewrap_DEPENDENCIES) 
  	@rm -f pgpewrap$(EXEEXT)
  	$(LINK) $(pgpewrap_OBJECTS) $(pgpewrap_LDADD) $(LIBS)
! pgpring$(EXEEXT): $(pgpring_OBJECTS) $(pgpring_DEPENDENCIES) 
  	@rm -f pgpring$(EXEEXT)
  	$(LINK) $(pgpring_OBJECTS) $(pgpring_LDADD) $(LIBS)
  install-binSCRIPTS: $(bin_SCRIPTS)
  	@$(NORMAL_INSTALL)
- 	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
  	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
  	for p in $$list; do \
  	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
  	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
--- 544,571 ----
  
  clean-noinstPROGRAMS:
  	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
! mutt$(EXEEXT): $(mutt_OBJECTS) $(mutt_DEPENDENCIES) $(EXTRA_mutt_DEPENDENCIES) 
  	@rm -f mutt$(EXEEXT)
  	$(LINK) $(mutt_OBJECTS) $(mutt_LDADD) $(LIBS)
! mutt_dotlock$(EXEEXT): $(mutt_dotlock_OBJECTS) $(mutt_dotlock_DEPENDENCIES) $(EXTRA_mutt_dotlock_DEPENDENCIES) 
  	@rm -f mutt_dotlock$(EXEEXT)
  	$(LINK) $(mutt_dotlock_OBJECTS) $(mutt_dotlock_LDADD) $(LIBS)
! mutt_md5$(EXEEXT): $(mutt_md5_OBJECTS) $(mutt_md5_DEPENDENCIES) $(EXTRA_mutt_md5_DEPENDENCIES) 
  	@rm -f mutt_md5$(EXEEXT)
  	$(mutt_md5_LINK) $(mutt_md5_OBJECTS) $(mutt_md5_LDADD) $(LIBS)
! pgpewrap$(EXEEXT): $(pgpewrap_OBJECTS) $(pgpewrap_DEPENDENCIES) $(EXTRA_pgpewrap_DEPENDENCIES) 
  	@rm -f pgpewrap$(EXEEXT)
  	$(LINK) $(pgpewrap_OBJECTS) $(pgpewrap_LDADD) $(LIBS)
! pgpring$(EXEEXT): $(pgpring_OBJECTS) $(pgpring_DEPENDENCIES) $(EXTRA_pgpring_DEPENDENCIES) 
  	@rm -f pgpring$(EXEEXT)
  	$(LINK) $(pgpring_OBJECTS) $(pgpring_LDADD) $(LIBS)
  install-binSCRIPTS: $(bin_SCRIPTS)
  	@$(NORMAL_INSTALL)
  	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || list=; \
+ 	if test -n "$$list"; then \
+ 	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
+ 	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
+ 	fi; \
  	for p in $$list; do \
  	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
  	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
***************
*** 558,566 ****
  	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
  	files=`for p in $$list; do echo "$$p"; done | \
  	       sed -e 's,.*/,,;$(transform)'`; \
! 	test -n "$$list" || exit 0; \
! 	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
! 	cd "$(DESTDIR)$(bindir)" && rm -f $$files
  
  mostlyclean-compile:
  	-rm -f *.$(OBJEXT)
--- 593,599 ----
  	@list='$(bin_SCRIPTS)'; test -n "$(bindir)" || exit 0; \
  	files=`for p in $$list; do echo "$$p"; done | \
  	       sed -e 's,.*/,,;$(transform)'`; \
! 	dir='$(DESTDIR)$(bindir)'; $(am__uninstall_files_from_dir)
  
  mostlyclean-compile:
  	-rm -f *.$(OBJEXT)
***************
*** 672,677 ****
--- 705,711 ----
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/send.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sendlib.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sha1.Po@am__quote@
+ @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sidebar.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signal.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/smime.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/smtp.Po@am__quote@
***************
*** 880,892 ****
  	done
  	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
  	  if test "$$subdir" = .; then :; else \
! 	    test -d "$(distdir)/$$subdir" \
  	    || $(MKDIR_P) "$(distdir)/$$subdir" \
  	    || exit 1; \
- 	  fi; \
- 	done
- 	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
- 	  if test "$$subdir" = .; then :; else \
  	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
  	    $(am__relativize); \
  	    new_distdir=$$reldir; \
--- 914,923 ----
  	done
  	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
  	  if test "$$subdir" = .; then :; else \
! 	    $(am__make_dryrun) \
! 	      || test -d "$(distdir)/$$subdir" \
  	      || $(MKDIR_P) "$(distdir)/$$subdir" \
  	      || exit 1; \
  	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
  	    $(am__relativize); \
  	    new_distdir=$$reldir; \
***************
*** 918,924 ****
  	$(am__remove_distdir)
  
  dist-bzip2: distdir
! 	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
  	$(am__remove_distdir)
  
  dist-lzma: distdir
--- 949,959 ----
  	$(am__remove_distdir)
  
  dist-bzip2: distdir
! 	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
! 	$(am__remove_distdir)
! 
! dist-lzip: distdir
! 	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz
  	$(am__remove_distdir)
  
  dist-lzma: distdir
***************
*** 926,932 ****
  	$(am__remove_distdir)
  
  dist-xz: distdir
! 	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
  	$(am__remove_distdir)
  
  dist-tarZ: distdir
--- 961,967 ----
  	$(am__remove_distdir)
  
  dist-xz: distdir
! 	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz
  	$(am__remove_distdir)
  
  dist-tarZ: distdir
***************
*** 957,962 ****
--- 992,999 ----
  	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
  	*.tar.lzma*) \
  	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
+ 	*.tar.lz*) \
+ 	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
  	*.tar.xz*) \
  	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
  	*.tar.Z*) \
***************
*** 966,972 ****
  	*.zip*) \
  	  unzip $(distdir).zip ;;\
  	esac
! 	chmod -R a-w $(distdir); chmod a+w $(distdir)
  	mkdir $(distdir)/_build
  	mkdir $(distdir)/_inst
  	chmod a-w $(distdir)
--- 1003,1009 ----
  	*.zip*) \
  	  unzip $(distdir).zip ;;\
  	esac
! 	chmod -R a-w $(distdir); chmod u+w $(distdir)
  	mkdir $(distdir)/_build
  	mkdir $(distdir)/_inst
  	chmod a-w $(distdir)
***************
*** 976,981 ****
--- 1013,1019 ----
  	  && am__cwd=`pwd` \
  	  && $(am__cd) $(distdir)/_build \
  	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
+ 	    $(AM_DISTCHECK_CONFIGURE_FLAGS) \
  	    $(DISTCHECK_CONFIGURE_FLAGS) \
  	  && $(MAKE) $(AM_MAKEFLAGS) \
  	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
***************
*** 1004,1011 ****
  	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
  	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
  distuninstallcheck:
! 	@$(am__cd) '$(distuninstallcheck_dir)' \
! 	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
  	   || { echo "ERROR: files left after uninstall:" ; \
  	        if test -n "$(DESTDIR)"; then \
  	          echo "  (check DESTDIR support)"; \
--- 1042,1057 ----
  	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
  	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
  distuninstallcheck:
! 	@test -n '$(distuninstallcheck_dir)' || { \
! 	  echo 'ERROR: trying to run $@ with an empty' \
! 	       '$$(distuninstallcheck_dir)' >&2; \
! 	  exit 1; \
! 	}; \
! 	$(am__cd) '$(distuninstallcheck_dir)' || { \
! 	  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \
! 	  exit 1; \
! 	}; \
! 	test `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \
  	   || { echo "ERROR: files left after uninstall:" ; \
  	        if test -n "$(DESTDIR)"; then \
  	          echo "  (check DESTDIR support)"; \
***************
*** 1041,1050 ****
  
  installcheck: installcheck-recursive
  install-strip:
  	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
  	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
! 	  `test -z '$(STRIP)' || \
! 	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
  mostlyclean-generic:
  
  clean-generic:
--- 1087,1101 ----
  
  installcheck: installcheck-recursive
  install-strip:
+ 	if test -z '$(STRIP)'; then \
  	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
  	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
! 	      install; \
! 	else \
! 	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
! 	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
! 	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
! 	fi
  mostlyclean-generic:
  
  clean-generic:
***************
*** 1141,1160 ****
  .PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
  	all all-am am--refresh check check-am clean clean-binPROGRAMS \
  	clean-generic clean-noinstPROGRAMS ctags ctags-recursive dist \
! 	dist-all dist-bzip2 dist-gzip dist-lzma dist-shar dist-tarZ \
! 	dist-xz dist-zip distcheck distclean distclean-compile \
! 	distclean-generic distclean-hdr distclean-tags distcleancheck \
! 	distdir distuninstallcheck dvi dvi-am html html-am info \
! 	info-am install install-am install-binPROGRAMS \
! 	install-binSCRIPTS install-data install-data-am \
! 	install-data-local install-dvi install-dvi-am install-exec \
! 	install-exec-am install-exec-hook install-html install-html-am \
! 	install-info install-info-am install-man install-pdf \
! 	install-pdf-am install-ps install-ps-am install-strip \
! 	installcheck installcheck-am installdirs installdirs-am \
! 	maintainer-clean maintainer-clean-generic mostlyclean \
! 	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
! 	tags tags-recursive uninstall uninstall-am \
  	uninstall-binPROGRAMS uninstall-binSCRIPTS uninstall-local
  
  
--- 1192,1211 ----
  .PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
  	all all-am am--refresh check check-am clean clean-binPROGRAMS \
  	clean-generic clean-noinstPROGRAMS ctags ctags-recursive dist \
! 	dist-all dist-bzip2 dist-gzip dist-lzip dist-lzma dist-shar \
! 	dist-tarZ dist-xz dist-zip distcheck distclean \
! 	distclean-compile distclean-generic distclean-hdr \
! 	distclean-tags distcleancheck distdir distuninstallcheck dvi \
! 	dvi-am html html-am info info-am install install-am \
! 	install-binPROGRAMS install-binSCRIPTS install-data \
! 	install-data-am install-data-local install-dvi install-dvi-am \
! 	install-exec install-exec-am install-exec-hook install-html \
! 	install-html-am install-info install-info-am install-man \
! 	install-pdf install-pdf-am install-ps install-ps-am \
! 	install-strip installcheck installcheck-am installdirs \
! 	installdirs-am maintainer-clean maintainer-clean-generic \
! 	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
! 	ps ps-am tags tags-recursive uninstall uninstall-am \
  	uninstall-binPROGRAMS uninstall-binSCRIPTS uninstall-local
  
  
*** mutt-1.5.20-1/mbox.c	2013-02-06 16:53:49.946195600 -0500
--- mutt-1.5.20-1-patched/mbox.c	2013-02-06 16:41:20.390651700 -0500
***************
*** 100,105 ****
--- 100,106 ----
      mutt_perror (ctx->path);
      return (-1);
    }
+   ctx->atime = sb.st_atime;
    ctx->mtime = sb.st_mtime;
    ctx->size = sb.st_size;
  
***************
*** 255,260 ****
--- 256,262 ----
  
    ctx->size = sb.st_size;
    ctx->mtime = sb.st_mtime;
+   ctx->atime = sb.st_atime;
  
  #ifdef NFS_ATTRIBUTE_HACK
    if (sb.st_mtime > sb.st_atime)
*** mutt-1.5.20-1/menu.c	2013-02-06 16:53:49.946195600 -0500
--- mutt-1.5.20-1-patched/menu.c	2013-02-06 16:41:20.390651700 -0500
***************
*** 24,29 ****
--- 24,30 ----
  #include "mutt_curses.h"
  #include "mutt_menu.h"
  #include "mbyte.h"
+ #include "sidebar.h"
  
  #include <string.h>
  #include <stdlib.h>
***************
*** 156,162 ****
  {
    char *scratch = safe_strdup (s);
    int shift = option (OPTARROWCURSOR) ? 3 : 0;
!   int cols = COLS - shift;
  
    mutt_format_string (s, n, cols, cols, FMT_LEFT, ' ', scratch, mutt_strlen (scratch), 1);
    s[n - 1] = 0;
--- 157,163 ----
  {
    char *scratch = safe_strdup (s);
    int shift = option (OPTARROWCURSOR) ? 3 : 0;
!   int cols = COLS - shift - SidebarWidth;
  
    mutt_format_string (s, n, cols, cols, FMT_LEFT, ' ', scratch, mutt_strlen (scratch), 1);
    s[n - 1] = 0;
***************
*** 207,212 ****
--- 208,214 ----
    char buf[LONG_STRING];
    int i;
  
+   draw_sidebar(1);
    for (i = menu->top; i < menu->top + menu->pagelen; i++)
    {
      if (i < menu->max)
***************
*** 217,223 ****
        if (option (OPTARROWCURSOR))
        {
          attrset (menu->color (i));
! 	CLEARLINE (i - menu->top + menu->offset);
  
  	if (i == menu->current)
  	{
--- 219,225 ----
        if (option (OPTARROWCURSOR))
        {
          attrset (menu->color (i));
! 	CLEARLINE_WIN (i - menu->top + menu->offset);
  
  	if (i == menu->current)
  	{
***************
*** 246,259 ****
  	  BKGDSET (MT_COLOR_INDICATOR);
  	}
  
! 	CLEARLINE (i - menu->top + menu->offset);
  	print_enriched_string (menu->color(i), (unsigned char *) buf, i != menu->current);
          SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
        }
      }
      else
!       CLEARLINE (i - menu->top + menu->offset);
    }
    menu->redraw = 0;
  }
--- 248,261 ----
  	  BKGDSET (MT_COLOR_INDICATOR);
  	}
  
! 	CLEARLINE_WIN (i - menu->top + menu->offset);
  	print_enriched_string (menu->color(i), (unsigned char *) buf, i != menu->current);
          SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
        }
      }
      else
!       CLEARLINE_WIN (i - menu->top + menu->offset);
    }
    menu->redraw = 0;
  }
***************
*** 268,274 ****
      return;
    }
    
!   move (menu->oldcurrent + menu->offset - menu->top, 0);
    SETCOLOR (MT_COLOR_NORMAL);
    BKGDSET (MT_COLOR_NORMAL);
  
--- 270,276 ----
      return;
    }
    
!   move (menu->oldcurrent + menu->offset - menu->top, SidebarWidth);
    SETCOLOR (MT_COLOR_NORMAL);
    BKGDSET (MT_COLOR_NORMAL);
  
***************
*** 283,295 ****
        clrtoeol ();
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
!       move (menu->oldcurrent + menu->offset - menu->top, 3);
        print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
        SETCOLOR (MT_COLOR_NORMAL);
      }
  
      /* now draw it in the new location */
!     move (menu->current + menu->offset - menu->top, 0);
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      addstr ("->");
--- 285,297 ----
        clrtoeol ();
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
!       move (menu->oldcurrent + menu->offset - menu->top, SidebarWidth + 3);
        print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
        SETCOLOR (MT_COLOR_NORMAL);
      }
  
      /* now draw it in the new location */
!     move (menu->current + menu->offset - menu->top, SidebarWidth);
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      addstr ("->");
***************
*** 310,316 ****
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      BKGDSET (MT_COLOR_INDICATOR);
!     CLEARLINE (menu->current - menu->top + menu->offset);
      print_enriched_string (menu->color(menu->current), (unsigned char *) buf, 0);
      SETCOLOR (MT_COLOR_NORMAL);
      BKGDSET (MT_COLOR_NORMAL);
--- 312,318 ----
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      BKGDSET (MT_COLOR_INDICATOR);
!     CLEARLINE_WIN (menu->current - menu->top + menu->offset);
      print_enriched_string (menu->color(menu->current), (unsigned char *) buf, 0);
      SETCOLOR (MT_COLOR_NORMAL);
      BKGDSET (MT_COLOR_NORMAL);
***************
*** 322,328 ****
  {
    char buf[LONG_STRING];
    
!   move (menu->current + menu->offset - menu->top, 0);
    menu_make_entry (buf, sizeof (buf), menu, menu->current);
    menu_pad_string (buf, sizeof (buf));
  
--- 324,330 ----
  {
    char buf[LONG_STRING];
    
!   move (menu->current + menu->offset - menu->top, SidebarWidth);
    menu_make_entry (buf, sizeof (buf), menu, menu->current);
    menu_pad_string (buf, sizeof (buf));
  
***************
*** 876,882 ****
      
      
      if (option (OPTARROWCURSOR))
!       move (menu->current - menu->top + menu->offset, 2);
      else if (option (OPTBRAILLEFRIENDLY))
        move (menu->current - menu->top + menu->offset, 0);
      else
--- 878,884 ----
      
      
      if (option (OPTARROWCURSOR))
!       move (menu->current - menu->top + menu->offset, SidebarWidth + 2);
      else if (option (OPTBRAILLEFRIENDLY))
        move (menu->current - menu->top + menu->offset, 0);
      else
*** mutt-1.5.20-1/mutt_curses.h	2013-02-06 16:53:49.966195800 -0500
--- mutt-1.5.20-1-patched/mutt_curses.h	2013-02-06 16:41:20.400651800 -0500
***************
*** 64,69 ****
--- 64,70 ----
  #undef lines
  #endif /* lines */
  
+ #define CLEARLINE_WIN(x) move(x,SidebarWidth), clrtoeol()
  #define CLEARLINE(x) move(x,0), clrtoeol()
  #define CENTERLINE(x,y) move(y, (COLS-strlen(x))/2), addstr(x)
  #define BEEP() do { if (option (OPTBEEP)) beep(); } while (0)
***************
*** 126,131 ****
--- 127,134 ----
    MT_COLOR_BOLD,
    MT_COLOR_UNDERLINE,
    MT_COLOR_INDEX,
+   MT_COLOR_NEW,
+   MT_COLOR_FLAGGED,
    MT_COLOR_MAX
  };
  
*** mutt-1.5.20-1/mutt.h	2013-02-06 16:53:49.956195700 -0500
--- mutt-1.5.20-1-patched/mutt.h	2013-02-06 16:41:20.400651800 -0500
***************
*** 418,423 ****
--- 418,425 ----
    OPTSAVEEMPTY,
    OPTSAVENAME,
    OPTSCORE,
+   OPTSIDEBAR,
+   OPTSIDEBARSORT,
    OPTSIGDASHES,
    OPTSIGONTOP,
    OPTSORTRE,
***************
*** 858,863 ****
--- 860,866 ----
  {
    char *path;
    FILE *fp;
+   time_t atime;
    time_t mtime;
    off_t size;
    off_t vsize;
***************
*** 892,897 ****
--- 895,901 ----
    unsigned int quiet : 1;	/* inhibit status messages? */
    unsigned int collapsed : 1;   /* are all threads collapsed? */
    unsigned int closing : 1;	/* mailbox is being closed */
+   unsigned int peekonly : 1;	/* just taking a glance, revert atime */
  
    /* driver hooks */
    void *data;			/* driver specific data */
*** mutt-1.5.20-1/muttlib.c	2013-02-06 16:53:49.966195800 -0500
--- mutt-1.5.20-1-patched/muttlib.c	2013-02-06 16:41:20.410651900 -0500
***************
*** 1265,1270 ****
--- 1265,1272 ----
  	  pl = pw = 1;
  
  	/* see if there's room to add content, else ignore */
+         if ( DrawFullLine )
+         {
  	if ((col < COLS && wlen < destlen) || soft)
  	{
  	  int pad;
***************
*** 1307,1312 ****
--- 1309,1360 ----
  	  col += wid;
  	  src += pl;
  	}
+         }
+         else
+         {
+ 	if ((col < COLS-SidebarWidth && wlen < destlen) || soft)
+         {
+ 	  int pad;
+ 
+ 	  /* get contents after padding */
+ 	  mutt_FormatString (buf, sizeof (buf), 0, src + pl, callback, data, flags);
+ 	  len = mutt_strlen (buf);
+ 	  wid = mutt_strwidth (buf);
+ 
+ 	  /* try to consume as many columns as we can, if we don't have
+ 	   * memory for that, use as much memory as possible */
+ 	  pad = (COLS - SidebarWidth - col - wid) / pw;
+ 	  if (pad > 0 && wlen + (pad * pl) + len > destlen)
+ 	    pad = ((signed)(destlen - wlen - len)) / pl;
+ 	  if (pad > 0)
+ 	  {
+ 	    while (pad--)
+ 	    {
+ 	      memcpy (wptr, src, pl);
+ 	      wptr += pl;
+ 	      wlen += pl;
+ 	      col += pw;
+ 	    }
+ 	  }
+ 	  else if (soft && pad < 0)
+ 	  {
+ 	    /* \0-terminate dest for length computation in mutt_wstr_trunc() */
+ 	    *wptr = 0;
+ 	    /* make sure right part is at most as wide as display */
+ 	    len = mutt_wstr_trunc (buf, destlen, COLS, &wid);
+ 	    /* truncate left so that right part fits completely in */
+ 	    wlen = mutt_wstr_trunc (dest, destlen - len, col + pad, &col);
+ 	    wptr = dest + wlen;
+ 	  }
+ 	  if (len + wlen > destlen)
+ 	    len = mutt_wstr_trunc (buf, destlen - wlen, COLS - SidebarWidth - col, NULL);
+ 	  memcpy (wptr, buf, len);
+ 	  wptr += len;
+ 	  wlen += len;
+ 	  col += wid;
+ 	  src += pl;
+ 	}
+         }
  	break; /* skip rest of input */
        }
        else if (ch == '|')
*** mutt-1.5.20-1/mx.c	2013-02-06 16:53:49.986196000 -0500
--- mutt-1.5.20-1-patched/mx.c	2013-02-06 16:41:20.420652000 -0500
***************
*** 580,585 ****
--- 580,586 ----
   *		M_APPEND	open mailbox for appending
   *		M_READONLY	open mailbox in read-only mode
   *		M_QUIET		only print error messages
+  *		M_PEEK		revert atime where applicable
   *	ctx	if non-null, context struct to use
   */
  CONTEXT *mx_open_mailbox (const char *path, int flags, CONTEXT *pctx)
***************
*** 602,607 ****
--- 603,610 ----
      ctx->quiet = 1;
    if (flags & M_READONLY)
      ctx->readonly = 1;
+   if (flags & M_PEEK)
+     ctx->peekonly = 1;
  
    if (flags & (M_APPEND|M_NEWFOLDER))
    {
***************
*** 701,709 ****
--- 704,724 ----
  void mx_fastclose_mailbox (CONTEXT *ctx)
  {
    int i;
+ #ifndef BUFFY_SIZE
+   struct utimbuf ut;
+ #endif
  
    if(!ctx) 
      return;
+ #ifndef BUFFY_SIZE
+   /* fix up the times so buffy won't get confused */
+   if (ctx->peekonly && ctx->path && ctx->mtime > ctx->atime)
+   {
+     ut.actime = ctx->atime;
+     ut.modtime = ctx->mtime;
+     utime (ctx->path, &ut); 
+   }
+ #endif
  
    /* never announce that a mailbox we've just left has new mail. #3290
     * XXX: really belongs in mx_close_mailbox, but this is a nice hook point */
*** mutt-1.5.20-1/OPS	2013-02-06 16:53:49.986196000 -0500
--- mutt-1.5.20-1-patched/OPS	2013-02-06 16:41:20.430652100 -0500
***************
*** 178,180 ****
--- 178,185 ----
  OP_MAIN_SHOW_LIMIT "show currently active limit pattern"
  OP_MAIN_COLLAPSE_THREAD "collapse/uncollapse current thread"
  OP_MAIN_COLLAPSE_ALL "collapse/uncollapse all threads"
+ OP_SIDEBAR_SCROLL_UP "scroll the mailbox pane up 1 page"
+ OP_SIDEBAR_SCROLL_DOWN "scroll the mailbox pane down 1 page"
+ OP_SIDEBAR_NEXT "go down to next mailbox"
+ OP_SIDEBAR_PREV "go to previous mailbox"
+ OP_SIDEBAR_OPEN "open hilighted mailbox"
*** mutt-1.5.20-1/pager.c	2013-02-06 16:53:49.986196000 -0500
--- mutt-1.5.20-1-patched/pager.c	2013-02-07 09:33:35.667808000 -0500
***************
*** 29,34 ****
--- 29,35 ----
  #include "pager.h"
  #include "attach.h"
  #include "mbyte.h"
+ #include "sidebar.h"
  
  #include "mutt_crypt.h"
  
***************
*** 1074,1079 ****
--- 1075,1082 ----
    if (check_attachment_marker ((char *)buf) == 0)
      wrap_cols = COLS;
    
+   wrap_cols -= SidebarWidth;
+ 
    /* FIXME: this should come from lineInfo */
    memset(&mbstate, 0, sizeof(mbstate));
  
***************
*** 1720,1726 ****
      if ((redraw & REDRAW_BODY) || topline != oldtopline)
      {
        do {
! 	move (bodyoffset, 0);
  	curline = oldtopline = topline;
  	lines = 0;
  	force_redraw = 0;
--- 1723,1729 ----
      if ((redraw & REDRAW_BODY) || topline != oldtopline)
      {
        do {
! 	move (bodyoffset, SidebarWidth);
  	curline = oldtopline = topline;
  	lines = 0;
  	force_redraw = 0;
***************
*** 1733,1738 ****
--- 1736,1742 ----
  			    &QuoteList, &q_level, &force_redraw, &SearchRE) > 0)
  	    lines++;
  	  curline++;
+   	  move(lines + bodyoffset, SidebarWidth);
  	}
  	last_offset = lineInfo[curline].offset;
        } while (force_redraw);
***************
*** 1746,1751 ****
--- 1750,1756 ----
  	  addch ('~');
  	addch ('\n');
  	lines++;
+   	move(lines + bodyoffset, SidebarWidth);
        }
        /* We are going to update the pager status bar, so it isn't
         * necessary to reset to normal color now. */
***************
*** 1769,1789 ****
        /* print out the pager status bar */
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       CLEARLINE (statusoffset);
  
        if (IsHeader (extra) || IsMsgAttach (extra))
        {
! 	size_t l1 = COLS * MB_LEN_MAX;
  	size_t l2 = sizeof (buffer);
  	hfi.hdr = (IsHeader (extra)) ? extra->hdr : extra->bdy->hdr;
  	mutt_make_string_info (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt), &hfi, M_FORMAT_MAKEPRINT);
! 	mutt_paddstr (COLS, buffer);
        }
        else
        {
  	char bn[STRING];
  	snprintf (bn, sizeof (bn), "%s (%s)", banner, pager_progress_str);
! 	mutt_paddstr (COLS, bn);
        }
        BKGDSET (MT_COLOR_NORMAL);
        SETCOLOR (MT_COLOR_NORMAL);
--- 1774,1794 ----
        /* print out the pager status bar */
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       CLEARLINE_WIN (statusoffset);
  
        if (IsHeader (extra) || IsMsgAttach (extra))
        {
! 	size_t l1 = (COLS-SidebarWidth) * MB_LEN_MAX;
  	size_t l2 = sizeof (buffer);
  	hfi.hdr = (IsHeader (extra)) ? extra->hdr : extra->bdy->hdr;
  	mutt_make_string_info (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt), &hfi, M_FORMAT_MAKEPRINT);
! 	mutt_paddstr (COLS-SidebarWidth, buffer);
        }
        else
        {
  	char bn[STRING];
  	snprintf (bn, sizeof (bn), "%s (%s)", banner, pager_progress_str);
! 	mutt_paddstr (COLS-SidebarWidth, bn);
        }
        BKGDSET (MT_COLOR_NORMAL);
        SETCOLOR (MT_COLOR_NORMAL);
***************
*** 1794,1811 ****
        /* redraw the pager_index indicator, because the
         * flags for this message might have changed. */
        menu_redraw_current (index);
  
        /* print out the index status bar */
        menu_status_line (buffer, sizeof (buffer), index, NONULL(Status));
   
!       move (indexoffset + (option (OPTSTATUSONTOP) ? 0 : (indexlen - 1)), 0);
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       mutt_paddstr (COLS, buffer);
        SETCOLOR (MT_COLOR_NORMAL);
        BKGDSET (MT_COLOR_NORMAL);
      }
  
      redraw = 0;
  
      if (option(OPTBRAILLEFRIENDLY)) {
--- 1799,1821 ----
        /* redraw the pager_index indicator, because the
         * flags for this message might have changed. */
        menu_redraw_current (index);
+       draw_sidebar(MENU_PAGER);
  
        /* print out the index status bar */
        menu_status_line (buffer, sizeof (buffer), index, NONULL(Status));
   
!       move (indexoffset + (option (OPTSTATUSONTOP) ? 0 : (indexlen - 1)), SidebarWidth);
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       mutt_paddstr (COLS-SidebarWidth, buffer);
        SETCOLOR (MT_COLOR_NORMAL);
        BKGDSET (MT_COLOR_NORMAL);
      }
  
+     /* if we're not using the index, update every time */
+     if ( index == 0 )
+       draw_sidebar(MENU_PAGER);
+ 
      redraw = 0;
  
      if (option(OPTBRAILLEFRIENDLY)) {
***************
*** 2732,2737 ****
--- 2742,2754 ----
  	mutt_what_key ();
  	break;
  
+       case OP_SIDEBAR_SCROLL_UP:
+       case OP_SIDEBAR_SCROLL_DOWN:
+       case OP_SIDEBAR_NEXT:
+       case OP_SIDEBAR_PREV:
+ 	scroll_sidebar(ch, MENU_PAGER);
+  	break;
+ 
        default:
  	ch = -1;
  	break;
*** mutt-1.5.20-1/PATCHES	2013-02-06 16:53:49.996196100 -0500
--- mutt-1.5.20-1-patched/PATCHES	2013-02-06 16:41:20.440652200 -0500
***************
*** 0 ****
--- 1 ----
+ patch-1.5.20.sidebar.20090619.txt
*** mutt-1.5.20-1/sidebar.c	1969-12-31 19:00:00.000000000 -0500
--- mutt-1.5.20-1-patched/sidebar.c	2013-02-06 16:41:20.440652200 -0500
***************
*** 0 ****
--- 1,333 ----
+ /*
+  * Copyright (C) ????-2004 Justin Hibbits <jrh29@po.cwru.edu>
+  * Copyright (C) 2004 Thomer M. Gil <mutt@thomer.com>
+  * 
+  *     This program is free software; you can redistribute it and/or modify
+  *     it under the terms of the GNU General Public License as published by
+  *     the Free Software Foundation; either version 2 of the License, or
+  *     (at your option) any later version.
+  * 
+  *     This program is distributed in the hope that it will be useful,
+  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  *     GNU General Public License for more details.
+  * 
+  *     You should have received a copy of the GNU General Public License
+  *     along with this program; if not, write to the Free Software
+  *     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
+  */ 
+ 
+ 
+ #if HAVE_CONFIG_H
+ # include "config.h"
+ #endif
+ 
+ #include "mutt.h"
+ #include "mutt_menu.h"
+ #include "mutt_curses.h"
+ #include "sidebar.h"
+ #include "buffy.h"
+ #include <libgen.h>
+ #include "keymap.h"
+ #include <stdbool.h>
+ 
+ /*BUFFY *CurBuffy = 0;*/
+ static BUFFY *TopBuffy = 0;
+ static BUFFY *BottomBuffy = 0;
+ static int known_lines = 0;
+ 
+ static int quick_log10(int n)
+ {
+         char string[32];
+         sprintf(string, "%d", n);
+         return strlen(string);
+ }
+ 
+ void calc_boundaries (int menu)
+ {
+ 	BUFFY *tmp = Incoming;
+ 
+ 	if ( known_lines != LINES ) {
+ 		TopBuffy = BottomBuffy = 0;
+ 		known_lines = LINES;
+ 	}
+ 	for ( ; tmp->next != 0; tmp = tmp->next )
+ 		tmp->next->prev = tmp;
+ 
+ 	if ( TopBuffy == 0 && BottomBuffy == 0 )
+ 		TopBuffy = Incoming;
+ 	if ( BottomBuffy == 0 ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER || option(OPTSTATUSONTOP));
+ 		BottomBuffy = TopBuffy;
+ 		while ( --count && BottomBuffy->next )
+ 			BottomBuffy = BottomBuffy->next;
+ 	}
+ 	else if ( TopBuffy == CurBuffy->next ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER);
+ 		BottomBuffy = CurBuffy;
+ 		tmp = BottomBuffy;
+ 		while ( --count && tmp->prev)
+ 			tmp = tmp->prev;
+ 		TopBuffy = tmp;
+ 	}
+ 	else if ( BottomBuffy == CurBuffy->prev ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER);
+ 		TopBuffy = CurBuffy;
+ 		tmp = TopBuffy;
+ 		while ( --count && tmp->next )
+ 			tmp = tmp->next;
+ 		BottomBuffy = tmp;
+ 	}
+ }
+ 
+ char *make_sidebar_entry(char *box, int size, int new, int flagged)
+ {
+ 	static char *entry = 0;
+ 	char *c;
+ 	int i = 0;
+ 	int delim_len = strlen(SidebarDelim);
+ 
+ 	c = realloc(entry, SidebarWidth - delim_len + 2);
+ 	if ( c ) entry = c;
+ 	entry[SidebarWidth - delim_len + 1] = 0;
+ 	for (; i < SidebarWidth - delim_len + 1; entry[i++] = ' ' );
+ 	i = strlen(box);
+ 	strncpy( entry, box, i < (SidebarWidth - delim_len + 1) ? i : (SidebarWidth - delim_len + 1) );
+ 
+         if (size == -1)
+                 sprintf(entry + SidebarWidth - delim_len - 3, "?");
+         else if ( new ) {
+           if (flagged > 0) {
+               sprintf(
+ 		        entry + SidebarWidth - delim_len - 5 - quick_log10(size) - quick_log10(new) - quick_log10(flagged),
+ 		        "% d(%d)[%d]", size, new, flagged);
+           } else {
+               sprintf(
+                       entry + SidebarWidth - delim_len - 3 - quick_log10(size) - quick_log10(new),
+                       "% d(%d)", size, new);
+           }
+         } else if (flagged > 0) {
+               sprintf( entry + SidebarWidth - delim_len - 3 - quick_log10(size) - quick_log10(flagged), "% d[%d]", size, flagged);
+         } else {
+               sprintf( entry + SidebarWidth - delim_len - 1 - quick_log10(size), "% d", size);
+         }
+ 	return entry;
+ }
+ 
+ void set_curbuffy(char buf[LONG_STRING])
+ {
+   BUFFY* tmp = CurBuffy = Incoming;
+ 
+   if (!Incoming)
+     return;
+ 
+   while(1) {
+     if(!strcmp(tmp->path, buf)) {
+       CurBuffy = tmp;
+       break;
+     }
+ 
+     if(tmp->next)
+       tmp = tmp->next;
+     else
+       break;
+   }
+ }
+ 
+ int draw_sidebar(int menu) {
+ 
+ 	int lines = option(OPTHELP) ? 1 : 0;
+ 	BUFFY *tmp;
+ #ifndef USE_SLANG_CURSES
+         attr_t attrs;
+ #endif
+         short delim_len = strlen(SidebarDelim);
+         short color_pair;
+ 
+         static bool initialized = false;
+         static int prev_show_value;
+         static short saveSidebarWidth;
+ 
+         /* initialize first time */
+         if(!initialized) {
+                 prev_show_value = option(OPTSIDEBAR);
+                 saveSidebarWidth = SidebarWidth;
+                 if(!option(OPTSIDEBAR)) SidebarWidth = 0;
+                 initialized = true;
+         }
+ 
+         /* save or restore the value SidebarWidth */
+         if(prev_show_value != option(OPTSIDEBAR)) {
+                 if(prev_show_value && !option(OPTSIDEBAR)) {
+                         saveSidebarWidth = SidebarWidth;
+                         SidebarWidth = 0;
+                 } else if(!prev_show_value && option(OPTSIDEBAR)) {
+                         SidebarWidth = saveSidebarWidth;
+                 }
+                 prev_show_value = option(OPTSIDEBAR);
+         }
+ 
+ 
+ //	if ( SidebarWidth == 0 ) return 0;
+        if (SidebarWidth > 0 && option (OPTSIDEBAR)
+            && delim_len >= SidebarWidth) {
+          unset_option (OPTSIDEBAR);
+          /* saveSidebarWidth = SidebarWidth; */
+          if (saveSidebarWidth > delim_len) {
+            SidebarWidth = saveSidebarWidth;
+            mutt_error (_("Value for sidebar_delim is too long. Disabling sidebar."));
+            sleep (2);
+          } else {
+            SidebarWidth = 0;
+            mutt_error (_("Value for sidebar_delim is too long. Disabling sidebar. Please set your sidebar_width to a sane value."));
+            sleep (4); /* the advise to set a sane value should be seen long enough */
+          }
+          saveSidebarWidth = 0;
+          return (0);
+        }
+ 
+     if ( SidebarWidth == 0 || !option(OPTSIDEBAR)) {
+       if (SidebarWidth > 0) {
+         saveSidebarWidth = SidebarWidth;
+         SidebarWidth = 0;
+       }
+       unset_option(OPTSIDEBAR);
+       return 0;
+     }
+ 
+         /* get attributes for divider */
+ 	SETCOLOR(MT_COLOR_STATUS);
+ #ifndef USE_SLANG_CURSES
+         attr_get(&attrs, &color_pair, 0);
+ #else
+         color_pair = attr_get();
+ #endif
+ 	SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 	/* draw the divider */
+ 
+ 	for ( ; lines < LINES-1-(menu != MENU_PAGER || option(OPTSTATUSONTOP)); lines++ ) {
+ 		move(lines, SidebarWidth - delim_len);
+ 		addstr(NONULL(SidebarDelim));
+ #ifndef USE_SLANG_CURSES
+                 mvchgat(lines, SidebarWidth - delim_len, delim_len, 0, color_pair, NULL);
+ #endif
+ 	}
+ 
+ 	if ( Incoming == 0 ) return 0;
+ 	lines = option(OPTHELP) ? 1 : 0; /* go back to the top */
+ 
+ 	if ( known_lines != LINES || TopBuffy == 0 || BottomBuffy == 0 ) 
+ 		calc_boundaries(menu);
+ 	if ( CurBuffy == 0 ) CurBuffy = Incoming;
+ 
+ 	tmp = TopBuffy;
+ 
+ 	SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 	for ( ; tmp && lines < LINES-1 - (menu != MENU_PAGER || option(OPTSTATUSONTOP)); tmp = tmp->next ) {
+ 		if ( tmp == CurBuffy )
+ 			SETCOLOR(MT_COLOR_INDICATOR);
+ 		else if ( tmp->msg_unread > 0 )
+ 			SETCOLOR(MT_COLOR_NEW);
+ 		else if ( tmp->msg_flagged > 0 )
+ 		        SETCOLOR(MT_COLOR_FLAGGED);
+ 		else
+ 			SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 		move( lines, 0 );
+ 		if ( Context && !strcmp( tmp->path, Context->path ) ) {
+ 			tmp->msg_unread = Context->unread;
+ 			tmp->msgcount = Context->msgcount;
+ 			tmp->msg_flagged = Context->flagged;
+ 		}
+ 		// check whether Maildir is a prefix of the current folder's path
+ 		short maildir_is_prefix = 0;
+ 		if ( (strlen(tmp->path) > strlen(Maildir)) &&
+ 			(strncmp(Maildir, tmp->path, strlen(Maildir)) == 0) )
+         		maildir_is_prefix = 1;
+ 		// calculate depth of current folder and generate its display name with indented spaces
+ 		int sidebar_folder_depth = 0;
+ 		char *sidebar_folder_name;
+ 		sidebar_folder_name = basename(tmp->path);
+ 		if ( maildir_is_prefix ) {
+ 			char *tmp_folder_name;
+ 			int i;
+ 			tmp_folder_name = tmp->path + strlen(Maildir);
+ 			for (i = 0; i < strlen(tmp->path) - strlen(Maildir); i++) {
+ 				if (tmp_folder_name[i] == '/') sidebar_folder_depth++;
+ 			}   
+ 			if (sidebar_folder_depth > 0) {
+ 				sidebar_folder_name = malloc(strlen(basename(tmp->path)) + sidebar_folder_depth + 1);
+ 				for (i=0; i < sidebar_folder_depth; i++)
+ 					sidebar_folder_name[i]=' ';
+ 				sidebar_folder_name[i]=0;
+ 				strncat(sidebar_folder_name, basename(tmp->path), strlen(basename(tmp->path)) + sidebar_folder_depth);
+ 			}
+ 		}
+ 		printw( "%.*s", SidebarWidth - delim_len + 1,
+ 			make_sidebar_entry(sidebar_folder_name, tmp->msgcount,
+ 			tmp->msg_unread, tmp->msg_flagged));
+ 		if (sidebar_folder_depth > 0)
+ 		        free(sidebar_folder_name);
+ 		lines++;
+ 	}
+ 	SETCOLOR(MT_COLOR_NORMAL);
+ 	for ( ; lines < LINES-1 - (menu != MENU_PAGER || option(OPTSTATUSONTOP)); lines++ ) {
+ 		int i = 0;
+ 		move( lines, 0 );
+ 		for ( ; i < SidebarWidth - delim_len; i++ )
+ 			addch(' ');
+ 	}
+ 	return 0;
+ }
+ 
+ 
+ void set_buffystats(CONTEXT* Context)
+ {
+         BUFFY *tmp = Incoming;
+         while(tmp) {
+                 if(Context && !strcmp(tmp->path, Context->path)) {
+ 			tmp->msg_unread = Context->unread;
+ 			tmp->msgcount = Context->msgcount;
+                         break;
+                 }
+                 tmp = tmp->next;
+         }
+ }
+ 
+ void scroll_sidebar(int op, int menu)
+ {
+         if(!SidebarWidth) return;
+         if(!CurBuffy) return;
+ 
+ 	switch (op) {
+ 		case OP_SIDEBAR_NEXT:
+ 			if ( CurBuffy->next == NULL ) return;
+ 			CurBuffy = CurBuffy->next;
+ 			break;
+ 		case OP_SIDEBAR_PREV:
+ 			if ( CurBuffy->prev == NULL ) return;
+ 			CurBuffy = CurBuffy->prev;
+ 			break;
+ 		case OP_SIDEBAR_SCROLL_UP:
+ 			CurBuffy = TopBuffy;
+ 			if ( CurBuffy != Incoming ) {
+ 				calc_boundaries(menu);
+ 				CurBuffy = CurBuffy->prev;
+ 			}
+ 			break;
+ 		case OP_SIDEBAR_SCROLL_DOWN:
+ 			CurBuffy = BottomBuffy;
+ 			if ( CurBuffy->next ) {
+ 				calc_boundaries(menu);
+ 				CurBuffy = CurBuffy->next;
+ 			}
+ 			break;
+ 		default:
+ 			return;
+ 	}
+ 	calc_boundaries(menu);
+ 	draw_sidebar(menu);
+ }
+ 
*** mutt-1.5.20-1/sidebar.h	1969-12-31 19:00:00.000000000 -0500
--- mutt-1.5.20-1-patched/sidebar.h	2013-02-06 16:41:20.450652300 -0500
***************
*** 0 ****
--- 1,36 ----
+ /*
+  * Copyright (C) ????-2004 Justin Hibbits <jrh29@po.cwru.edu>
+  * Copyright (C) 2004 Thomer M. Gil <mutt@thomer.com>
+  * 
+  *     This program is free software; you can redistribute it and/or modify
+  *     it under the terms of the GNU General Public License as published by
+  *     the Free Software Foundation; either version 2 of the License, or
+  *     (at your option) any later version.
+  * 
+  *     This program is distributed in the hope that it will be useful,
+  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  *     GNU General Public License for more details.
+  * 
+  *     You should have received a copy of the GNU General Public License
+  *     along with this program; if not, write to the Free Software
+  *     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
+  */ 
+ 
+ #ifndef SIDEBAR_H
+ #define SIDEBAR_H
+ 
+ struct MBOX_LIST {
+ 	char *path;
+ 	int msgcount;
+ 	int new;
+ } MBLIST;
+ 
+ /* parameter is whether or not to go to the status line */
+ /* used for omitting the last | that covers up the status bar in the index */
+ int draw_sidebar(int);
+ void scroll_sidebar(int, int);
+ void set_curbuffy(char*);
+ void set_buffystats(CONTEXT*);
+ 
+ #endif /* SIDEBAR_H */
*** mutt-1.5.20-1/doc/Muttrc	1969-12-31 19:00:00.000000000 -0500
--- mutt-1.5.20-1-patched/doc/Muttrc	2013-02-07 09:37:26.427151300 -0500
***************
*** 0 ****
--- 1,4808 ----
+ #
+ # System configuration file for Mutt
+ #
+ 
+ # Default list of header fields to weed when displaying.
+ # Ignore all lines by default...
+ ignore *
+ 
+ # ... then allow these through.
+ unignore from: subject to cc date x-mailer x-url user-agent
+ 
+ # Display the fields in this order
+ hdr_order date from to cc subject
+ 
+ # imitate the old search-body function
+ macro index \eb "<search>~b " "search in message bodies"
+ 
+ # simulate the old url menu
+ macro index,pager,attach,compose \cb "\
+ <enter-command> set my_pipe_decode=\$pipe_decode pipe_decode<Enter>\
+ <pipe-message> urlview<Enter>\
+ <enter-command> set pipe_decode=\$my_pipe_decode; unset my_pipe_decode<Enter>" \
+ "call urlview to extract URLs out of a message"
+ 
+ # Show documentation when pressing F1
+ macro generic,pager <F1> "<shell-escape> less /usr/local/share/doc/mutt/manual.txt<Enter>" "show Mutt documentation"
+ 
+ # show the incoming mailboxes list (just like "mutt -y") and back when pressing "y"
+ macro index,pager y "<change-folder>?<toggle-mailboxes>" "show incoming mailboxes list"
+ bind browser y exit
+ 
+ # If Mutt is unable to determine your site's domain name correctly, you can
+ # set the default here.
+ #
+ # set hostname=cs.hmc.edu
+ 
+ # If your sendmail supports the -B8BITMIME flag, enable the following
+ #
+ # set use_8bitmime
+ 
+ # Use mime.types to look up handlers for application/octet-stream. Can
+ # be undone with unmime_lookup.
+ mime_lookup application/octet-stream
+ 
+ ##
+ ## *** DEFAULT SETTINGS FOR THE ATTACHMENTS PATCH ***
+ ##
+ 
+ ##
+ ## Please see the manual (section "attachments")  for detailed
+ ## documentation of the "attachments" command.
+ ##
+ ## Removing a pattern from a list removes that pattern literally. It
+ ## does not remove any type matching the pattern.
+ ##
+ ##  attachments   +A */.*
+ ##  attachments   +A image/jpeg
+ ##  unattachments +A */.*
+ ##
+ ## This leaves "attached" image/jpeg files on the allowed attachments
+ ## list. It does not remove all items, as you might expect, because the
+ ## second */.* is not a matching expression at this time.
+ ##
+ ## Remember: "unattachments" only undoes what "attachments" has done!
+ ## It does not trigger any matching on actual messages.
+ 
+ ## Qualify any MIME part with an "attachment" disposition, EXCEPT for
+ ## text/x-vcard and application/pgp parts. (PGP parts are already known
+ ## to mutt, and can be searched for with ~g, ~G, and ~k.)
+ ##
+ ## I've added x-pkcs7 to this, since it functions (for S/MIME)
+ ## analogously to PGP signature attachments. S/MIME isn't supported
+ ## in a stock mutt build, but we can still treat it specially here.
+ ##
+ attachments   +A */.*
+ attachments   -A text/x-vcard application/pgp.*
+ attachments   -A application/x-pkcs7-.*
+ 
+ ## Discount all MIME parts with an "inline" disposition, unless they're
+ ## text/plain. (Why inline a text/plain part unless it's external to the
+ ## message flow?)
+ ##
+ attachments   +I text/plain
+   
+ ## These two lines make Mutt qualify MIME containers.  (So, for example,
+ ## a message/rfc822 forward will count as an attachment.)  The first
+ ## line is unnecessary if you already have "attach-allow */.*", of
+ ## course.  These are off by default!  The MIME elements contained
+ ## within a message/* or multipart/* are still examined, even if the
+ ## containers themselves don't qualify.
+ ##
+ #attachments  +A message/.* multipart/.*
+ #attachments  +I message/.* multipart/.*
+ 
+ ## You probably don't really care to know about deleted attachments.
+ attachments   -A message/external-body
+ attachments   -I message/external-body
+ 
+ ##
+ ## More settings
+ ##
+ 
+ 
+ # set abort_nosubject=ask-yes
+ #
+ # Name: abort_nosubject
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # If set to yes, when composing messages and no subject is given
+ # at the subject prompt, composition will be aborted.  If set to
+ # no, composing messages with no subject given at the subject
+ # prompt will never be aborted.
+ # 
+ # 
+ # set abort_unmodified=yes
+ #
+ # Name: abort_unmodified
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # If set to yes, composition will automatically abort after
+ # editing the message body if no changes are made to the file (this
+ # check only happens after the first edit of the file).  When set
+ # to no, composition will never be aborted.
+ # 
+ # 
+ # set alias_file="~/.muttrc"
+ #
+ # Name: alias_file
+ # Type: path
+ # Default: "~/.muttrc"
+ # 
+ # 
+ # The default file in which to save aliases created by the
+ # <create-alias> function. Entries added to this file are
+ # encoded in the character set specified by $config_charset if it
+ # is set or the current character set otherwise.
+ # 
+ # Note: Mutt will not automatically source this file; you must
+ # explicitly use the ``source'' command for it to be executed in case
+ # this option points to a dedicated alias file.
+ # 
+ # The default for this option is the currently used muttrc file, or
+ # ``~/.muttrc'' if no user muttrc was found.
+ # 
+ # 
+ # set alias_format="%4n %2f %t %-10a   %r"
+ #
+ # Name: alias_format
+ # Type: string
+ # Default: "%4n %2f %t %-10a   %r"
+ # 
+ # 
+ # Specifies the format of the data displayed for the ``alias'' menu.  The
+ # following printf(3)-style sequences are available:
+ # %a      alias name
+ # %f      flags - currently, a ``d'' for an alias marked for deletion
+ # %n      index number
+ # %r      address which alias expands to
+ # %t      character which indicates if the alias is tagged for inclusion
+ # 
+ # 
+ # set allow_8bit=yes
+ #
+ # Name: allow_8bit
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether 8-bit data is converted to 7-bit using either Quoted-
+ # Printable or Base64 encoding when sending mail.
+ # 
+ # 
+ # set allow_ansi=no
+ #
+ # Name: allow_ansi
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Controls whether ANSI color codes in messages (and color tags in
+ # rich text messages) are to be interpreted.
+ # Messages containing these codes are rare, but if this option is set,
+ # their text will be colored accordingly. Note that this may override
+ # your color choices, and even present a security problem, since a
+ # message could include a line like
+ # [-- PGP output follows ...
+ # 
+ # and give it the same color as your attachment color (see also
+ # $crypt_timestamp).
+ # 
+ # 
+ # set arrow_cursor=no
+ #
+ # Name: arrow_cursor
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, an arrow (``->'') will be used to indicate the current entry
+ # in menus instead of highlighting the whole line.  On slow network or modem
+ # links this will make response faster because there is less that has to
+ # be redrawn on the screen when moving to the next or previous entries
+ # in the menu.
+ # 
+ # 
+ # set ascii_chars=no
+ #
+ # Name: ascii_chars
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, Mutt will use plain ASCII characters when displaying thread
+ # and attachment trees, instead of the default ACS characters.
+ # 
+ # 
+ # set askbcc=no
+ #
+ # Name: askbcc
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
+ # before editing an outgoing message.
+ # 
+ # 
+ # set askcc=no
+ #
+ # Name: askcc
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, Mutt will prompt you for carbon-copy (Cc) recipients before
+ # editing the body of an outgoing message.
+ # 
+ # 
+ # set assumed_charset=""
+ #
+ # Name: assumed_charset
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable is a colon-separated list of character encoding
+ # schemes for messages without character encoding indication.
+ # Header field values and message body content without character encoding
+ # indication would be assumed that they are written in one of this list.
+ # By default, all the header fields and message body without any charset
+ # indication are assumed to be in ``us-ascii''.
+ # 
+ # For example, Japanese users might prefer this:
+ # set assumed_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
+ # 
+ # However, only the first content is valid for the message body.
+ # 
+ # 
+ # set attach_charset=""
+ #
+ # Name: attach_charset
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable is a colon-separated list of character encoding
+ # schemes for text file attachments. Mutt uses this setting to guess
+ # which encoding files being attached are encoded in to convert them to
+ # a proper character set given in $send_charset.
+ # 
+ # If unset, the value of $charset will be used instead.
+ # For example, the following configuration would work for Japanese
+ # text handling:
+ # set attach_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
+ # 
+ # Note: for Japanese users, ``iso-2022-*'' must be put at the head
+ # of the value as shown above if included.
+ # 
+ # 
+ # set attach_format="%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] "
+ #
+ # Name: attach_format
+ # Type: string
+ # Default: "%u%D%I %t%4n %T%.40d%> [%.7m/%.10M, %.6e%?C?, %C?, %s] "
+ # 
+ # 
+ # This variable describes the format of the ``attachment'' menu.  The
+ # following printf(3)-style sequences are understood:
+ # %C      charset
+ # %c      requires charset conversion (``n'' or ``c'')
+ # %D      deleted flag
+ # %d      description
+ # %e      MIME content-transfer-encoding
+ # %f      filename
+ # %I      disposition (``I'' for inline, ``A'' for attachment)
+ # %m      major MIME type
+ # %M      MIME subtype
+ # %n      attachment number
+ # %Q      ``Q'', if MIME part qualifies for attachment counting
+ # %s      size
+ # %t      tagged flag
+ # %T      graphic tree characters
+ # %u      unlink (=to delete) flag
+ # %X      number of qualifying MIME parts in this part and its children
+ #         (please see the ``attachments'' section for possible speed effects)
+ # %>X     right justify the rest of the string and pad with character ``X''
+ # %|X     pad to the end of the line with character ``X''
+ # %*X     soft-fill with character ``X'' as pad
+ # 
+ # 
+ # For an explanation of ``soft-fill'', see the $index_format documentation.
+ # 
+ # 
+ # set attach_sep="\n"
+ #
+ # Name: attach_sep
+ # Type: string
+ # Default: "\n"
+ # 
+ # 
+ # The separator to add between attachments when operating (saving,
+ # printing, piping, etc) on a list of tagged attachments.
+ # 
+ # 
+ # set attach_split=yes
+ #
+ # Name: attach_split
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If this variable is unset, when operating (saving, printing, piping,
+ # etc) on a list of tagged attachments, Mutt will concatenate the
+ # attachments and will operate on them as a single attachment. The
+ # $attach_sep separator is added after each attachment. When set,
+ # Mutt will operate on the attachments one by one.
+ # 
+ # 
+ # set attribution="On %d, %n wrote:"
+ #
+ # Name: attribution
+ # Type: string
+ # Default: "On %d, %n wrote:"
+ # 
+ # 
+ # This is the string that will precede a message which has been included
+ # in a reply.  For a full listing of defined printf(3)-like sequences see
+ # the section on $index_format.
+ # 
+ # 
+ # set auto_tag=no
+ #
+ # Name: auto_tag
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, functions in the index menu which affect a message
+ # will be applied to all tagged messages (if there are any).  When
+ # unset, you must first use the <tag-prefix> function (bound to ``;''
+ # by default) to make the next function apply to all tagged messages.
+ # 
+ # 
+ # set autoedit=no
+ #
+ # Name: autoedit
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set along with $edit_headers, Mutt will skip the initial
+ # send-menu (prompting for subject and recipients) and allow you to
+ # immediately begin editing the body of your
+ # message.  The send-menu may still be accessed once you have finished
+ # editing the body of your message.
+ # 
+ # Note: when this option is set, you cannot use send-hooks that depend
+ # on the recipients when composing a new (non-reply) message, as the initial
+ # list of recipients is empty.
+ # 
+ # Also see $fast_reply.
+ # 
+ # 
+ # set beep=yes
+ #
+ # Name: beep
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When this variable is set, mutt will beep when an error occurs.
+ # 
+ # 
+ # set beep_new=no
+ #
+ # Name: beep_new
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When this variable is set, mutt will beep whenever it prints a message
+ # notifying you of new mail.  This is independent of the setting of the
+ # $beep variable.
+ # 
+ # 
+ # set bounce=ask-yes
+ #
+ # Name: bounce
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether you will be asked to confirm bouncing messages.
+ # If set to yes you don't get asked if you want to bounce a
+ # message. Setting this variable to no is not generally useful,
+ # and thus not recommended, because you are unable to bounce messages.
+ # 
+ # 
+ # set bounce_delivered=yes
+ #
+ # Name: bounce_delivered
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When this variable is set, mutt will include Delivered-To headers when
+ # bouncing messages.  Postfix users may wish to unset this variable.
+ # 
+ # 
+ # set braille_friendly=no
+ #
+ # Name: braille_friendly
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When this variable is set, mutt will place the cursor at the beginning
+ # of the current line in menus, even when the $arrow_cursor variable
+ # is unset, making it easier for blind persons using Braille displays to
+ # follow these menus.  The option is unset by default because many
+ # visual terminals don't permit making the cursor invisible.
+ # 
+ # 
+ # set certificate_file="~/.mutt_certificates"
+ #
+ # Name: certificate_file
+ # Type: path
+ # Default: "~/.mutt_certificates"
+ # 
+ # 
+ # This variable specifies the file where the certificates you trust
+ # are saved. When an unknown certificate is encountered, you are asked
+ # if you accept it or not. If you accept it, the certificate can also
+ # be saved in this file and further connections are automatically
+ # accepted.
+ # 
+ # You can also manually add CA certificates in this file. Any server
+ # certificate that is signed with one of these CA certificates is
+ # also automatically accepted.
+ # 
+ # Example:
+ # set certificate_file=~/.mutt/certificates
+ # 
+ # 
+ # set charset=""
+ #
+ # Name: charset
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Character set your terminal uses to display and enter textual data.
+ # It is also the fallback for $send_charset.
+ # 
+ # Upon startup Mutt tries to derive this value from environment variables
+ # such as $LC_CTYPE or $LANG.
+ # 
+ # Note: It should only be set in case Mutt isn't abled to determine the
+ # character set used correctly.
+ # 
+ # 
+ # set check_mbox_size=no
+ #
+ # Name: check_mbox_size
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When this variable is set, mutt will use file size attribute instead of
+ # access time when checking for new mail in mbox and mmdf folders.
+ # 
+ # This variable is unset by default and should only be enabled when
+ # new mail detection for these folder types is unreliable or doesn't work.
+ # 
+ # Note that enabling this variable should happen before any ``mailboxes''
+ # directives occur in configuration files regarding mbox or mmdf folders
+ # because mutt needs to determine the initial new mail status of such a
+ # mailbox by performing a fast mailbox scan when it is defined.
+ # Afterwards the new mail status is tracked by file size changes.
+ # 
+ # 
+ # set check_new=yes
+ #
+ # Name: check_new
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Note: this option only affects maildir and MH style
+ # mailboxes.
+ # 
+ # When set, Mutt will check for new mail delivered while the
+ # mailbox is open.  Especially with MH mailboxes, this operation can
+ # take quite some time since it involves scanning the directory and
+ # checking each file to see if it has already been looked at.  If
+ # this variable is unset, no check for new mail is performed
+ # while the mailbox is open.
+ # 
+ # 
+ # set collapse_unread=yes
+ #
+ # Name: collapse_unread
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When unset, Mutt will not collapse a thread if it contains any
+ # unread messages.
+ # 
+ # 
+ # set compose_format="-- Mutt: Compose  [Approx. msg size: %l   Atts: %a]%>-"
+ #
+ # Name: compose_format
+ # Type: string
+ # Default: "-- Mutt: Compose  [Approx. msg size: %l   Atts: %a]%>-"
+ # 
+ # 
+ # Controls the format of the status line displayed in the ``compose''
+ # menu.  This string is similar to $status_format, but has its own
+ # set of printf(3)-like sequences:
+ # %a      total number of attachments
+ # %h      local hostname
+ # %l      approximate size (in bytes) of the current message
+ # %v      Mutt version string
+ # 
+ # 
+ # See the text describing the $status_format option for more
+ # information on how to set $compose_format.
+ # 
+ # 
+ # set config_charset=""
+ #
+ # Name: config_charset
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # When defined, Mutt will recode commands in rc files from this
+ # encoding to the current character set as specified by $charset
+ # and aliases written to $alias_file from the current character set.
+ # 
+ # Please note that if setting $charset it must be done before
+ # setting $config_charset.
+ # 
+ # Recoding should be avoided as it may render unconvertable
+ # characters as question marks which can lead to undesired
+ # side effects (for example in regular expressions).
+ # 
+ # 
+ # set confirmappend=yes
+ #
+ # Name: confirmappend
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will prompt for confirmation when appending messages to
+ # an existing mailbox.
+ # 
+ # 
+ # set confirmcreate=yes
+ #
+ # Name: confirmcreate
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will prompt for confirmation when saving messages to a
+ # mailbox which does not yet exist before creating it.
+ # 
+ # 
+ # set connect_timeout=30
+ #
+ # Name: connect_timeout
+ # Type: number
+ # Default: 30
+ # 
+ # 
+ # Causes Mutt to timeout a network connection (for IMAP, POP or SMTP) after this
+ # many seconds if the connection is not able to be established.  A negative
+ # value causes Mutt to wait indefinitely for the connection attempt to succeed.
+ # 
+ # 
+ # set content_type="text/plain"
+ #
+ # Name: content_type
+ # Type: string
+ # Default: "text/plain"
+ # 
+ # 
+ # Sets the default Content-Type for the body of newly composed messages.
+ # 
+ # 
+ # set copy=yes
+ #
+ # Name: copy
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether or not copies of your outgoing messages
+ # will be saved for later references.  Also see $record,
+ # $save_name, $force_name and ``fcc-hook''.
+ # 
+ # 
+ # set crypt_autoencrypt=no
+ #
+ # Name: crypt_autoencrypt
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Setting this variable will cause Mutt to always attempt to PGP
+ # encrypt outgoing messages.  This is probably only useful in
+ # connection to the ``send-hook'' command.  It can be overridden
+ # by use of the pgp menu, when encryption is not required or
+ # signing is requested as well.  If $smime_is_default is set,
+ # then OpenSSL is used instead to create S/MIME messages and
+ # settings can be overridden by use of the smime menu instead.
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_autopgp=yes
+ #
+ # Name: crypt_autopgp
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether or not mutt may automatically enable
+ # PGP encryption/signing for messages.  See also $crypt_autoencrypt,
+ # $crypt_replyencrypt,
+ # $crypt_autosign, $crypt_replysign and $smime_is_default.
+ # 
+ # 
+ # set crypt_autosign=no
+ #
+ # Name: crypt_autosign
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Setting this variable will cause Mutt to always attempt to
+ # cryptographically sign outgoing messages.  This can be overridden
+ # by use of the pgp menu, when signing is not required or
+ # encryption is requested as well. If $smime_is_default is set,
+ # then OpenSSL is used instead to create S/MIME messages and settings can
+ # be overridden by use of the smime menu instead of the pgp menu.
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_autosmime=yes
+ #
+ # Name: crypt_autosmime
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether or not mutt may automatically enable
+ # S/MIME encryption/signing for messages. See also $crypt_autoencrypt,
+ # $crypt_replyencrypt,
+ # $crypt_autosign, $crypt_replysign and $smime_is_default.
+ # 
+ # 
+ # set crypt_replyencrypt=yes
+ #
+ # Name: crypt_replyencrypt
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, automatically PGP or OpenSSL encrypt replies to messages which are
+ # encrypted.
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_replysign=no
+ #
+ # Name: crypt_replysign
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, automatically PGP or OpenSSL sign replies to messages which are
+ # signed.
+ # 
+ # Note: this does not work on messages that are encrypted
+ # and signed!
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_replysignencrypted=no
+ #
+ # Name: crypt_replysignencrypted
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, automatically PGP or OpenSSL sign replies to messages
+ # which are encrypted. This makes sense in combination with
+ # $crypt_replyencrypt, because it allows you to sign all
+ # messages which are automatically encrypted.  This works around
+ # the problem noted in $crypt_replysign, that mutt is not able
+ # to find out whether an encrypted message is also signed.
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_timestamp=yes
+ #
+ # Name: crypt_timestamp
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, mutt will include a time stamp in the lines surrounding
+ # PGP or S/MIME output, so spoofing such lines is more difficult.
+ # If you are using colors to mark these lines, and rely on these,
+ # you may unset this setting.
+ # (Crypto only)
+ # 
+ # 
+ # set crypt_use_gpgme=no
+ #
+ # Name: crypt_use_gpgme
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable controls the use of the GPGME-enabled crypto backends.
+ # If it is set and Mutt was built with gpgme support, the gpgme code for
+ # S/MIME and PGP will be used instead of the classic code.  Note that
+ # you need to set this option in .muttrc; it won't have any effect when
+ # used interactively.
+ # 
+ # 
+ # set crypt_use_pka=no
+ #
+ # Name: crypt_use_pka
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Controls whether mutt uses PKA
+ # (see http://www.g10code.de/docs/pka-intro.de.pdf) during signature
+ # verification (only supported by the GPGME backend).
+ # 
+ # 
+ # set crypt_verify_sig=yes
+ #
+ # Name: crypt_verify_sig
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # If ``yes'', always attempt to verify PGP or S/MIME signatures.
+ # If ``ask-*'', ask whether or not to verify the signature.
+ # If \Fi``no'', never attempt to verify cryptographic signatures.
+ # (Crypto only)
+ # 
+ # 
+ # set date_format="!%a, %b %d, %Y at %I:%M:%S%p %Z"
+ #
+ # Name: date_format
+ # Type: string
+ # Default: "!%a, %b %d, %Y at %I:%M:%S%p %Z"
+ # 
+ # 
+ # This variable controls the format of the date printed by the ``%d''
+ # sequence in $index_format.  This is passed to the strftime(3)
+ # function to process the date, see the man page for the proper syntax.
+ # 
+ # Unless the first character in the string is a bang (``!''), the month
+ # and week day names are expanded according to the locale specified in
+ # the variable $locale. If the first character in the string is a
+ # bang, the bang is discarded, and the month and week day names in the
+ # rest of the string are expanded in the C locale (that is in US
+ # English).
+ # 
+ # 
+ # set default_hook="~f %s !~P | (~P ~C %s)"
+ #
+ # Name: default_hook
+ # Type: string
+ # Default: "~f %s !~P | (~P ~C %s)"
+ # 
+ # 
+ # This variable controls how ``message-hook'', ``reply-hook'', ``send-hook'',
+ # ``send2-hook'', ``save-hook'', and ``fcc-hook'' will
+ # be interpreted if they are specified with only a simple regexp,
+ # instead of a matching pattern.  The hooks are expanded when they are
+ # declared, so a hook will be interpreted according to the value of this
+ # variable at the time the hook is declared.
+ # 
+ # The default value matches
+ # if the message is either from a user matching the regular expression
+ # given, or if it is from you (if the from address matches
+ # ``alternates'') and is to or cc'ed to a user matching the given
+ # regular expression.
+ # 
+ # 
+ # set delete=ask-yes
+ #
+ # Name: delete
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether or not messages are really deleted when closing or
+ # synchronizing a mailbox.  If set to yes, messages marked for
+ # deleting will automatically be purged without prompting.  If set to
+ # no, messages marked for deletion will be kept in the mailbox.
+ # 
+ # 
+ # set delete_untag=yes
+ #
+ # Name: delete_untag
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If this option is set, mutt will untag messages when marking them
+ # for deletion.  This applies when you either explicitly delete a message,
+ # or when you save it to another folder.
+ # 
+ # 
+ # set digest_collapse=yes
+ #
+ # Name: digest_collapse
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If this option is set, mutt's received-attachments menu will not show the subparts of
+ # individual messages in a multipart/digest.  To see these subparts, press ``v'' on that menu.
+ # 
+ # 
+ # set display_filter=""
+ #
+ # Name: display_filter
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # When set, specifies a command used to filter messages.  When a message
+ # is viewed it is passed as standard input to $display_filter, and the
+ # filtered message is read from the standard output.
+ # 
+ # 
+ # set dotlock_program="/usr/local/bin/mutt_dotlock"
+ #
+ # Name: dotlock_program
+ # Type: path
+ # Default: "/usr/local/bin/mutt_dotlock"
+ # 
+ # 
+ # Contains the path of the mutt_dotlock(8) binary to be used by
+ # mutt.
+ # 
+ # 
+ # set dsn_notify=""
+ #
+ # Name: dsn_notify
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable sets the request for when notification is returned.  The
+ # string consists of a comma separated list (no spaces!) of one or more
+ # of the following: never, to never request notification,
+ # failure, to request notification on transmission failure,
+ # delay, to be notified of message delays, success, to be
+ # notified of successful transmission.
+ # 
+ # Example:
+ # set dsn_notify="failure,delay"
+ # 
+ # Note: when using $sendmail for delivery, you should not enable
+ # this unless you are either using Sendmail 8.8.x or greater or a MTA
+ # providing a sendmail(1)-compatible interface supporting the -N option
+ # for DSN. For SMTP delivery, DSN support is auto-detected so that it
+ # depends on the server whether DSN will be used or not.
+ # 
+ # 
+ # set dsn_return=""
+ #
+ # Name: dsn_return
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable controls how much of your message is returned in DSN
+ # messages.  It may be set to either hdrs to return just the
+ # message header, or full to return the full message.
+ # 
+ # Example:
+ # set dsn_return=hdrs
+ # 
+ # Note: when using $sendmail for delivery, you should not enable
+ # this unless you are either using Sendmail 8.8.x or greater or a MTA
+ # providing a sendmail(1)-compatible interface supporting the -R option
+ # for DSN. For SMTP delivery, DSN support is auto-detected so that it
+ # depends on the server whether DSN will be used or not.
+ # 
+ # 
+ # set duplicate_threads=yes
+ #
+ # Name: duplicate_threads
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether mutt, when $sort is set to threads, threads
+ # messages with the same Message-Id together.  If it is set, it will indicate
+ # that it thinks they are duplicates of each other with an equals sign
+ # in the thread tree.
+ # 
+ # 
+ # set edit_headers=no
+ #
+ # Name: edit_headers
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This option allows you to edit the header of your outgoing messages
+ # along with the body of your message.
+ # 
+ # Note that changes made to the References: and Date: headers are
+ # ignored for interoperability reasons.
+ # 
+ # 
+ # set editor=""
+ #
+ # Name: editor
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This variable specifies which editor is used by mutt.
+ # It defaults to the value of the $VISUAL, or $EDITOR, environment
+ # variable, or to the string ``vi'' if neither of those are set.
+ # 
+ # 
+ # set encode_from=no
+ #
+ # Name: encode_from
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will quoted-printable encode messages when
+ # they contain the string ``From '' (note the trailing space) in the beginning of a line.
+ # This is useful to avoid the tampering certain mail delivery and transport
+ # agents tend to do with messages (in order to prevent tools from
+ # misinterpreting the line as a mbox message separator).
+ # 
+ # 
+ # set entropy_file=""
+ #
+ # Name: entropy_file
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # The file which includes random data that is used to initialize SSL
+ # library functions.
+ # 
+ # 
+ # set envelope_from_address=""
+ #
+ # Name: envelope_from_address
+ # Type: e-mail address
+ # Default: ""
+ # 
+ # 
+ # Manually sets the envelope sender for outgoing messages.
+ # This value is ignored if $use_envelope_from is unset.
+ # 
+ # 
+ # set escape="~"
+ #
+ # Name: escape
+ # Type: string
+ # Default: "~"
+ # 
+ # 
+ # Escape character to use for functions in the built-in editor.
+ # 
+ # 
+ # set fast_reply=no
+ #
+ # Name: fast_reply
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, the initial prompt for recipients and subject are skipped
+ # when replying to messages, and the initial prompt for subject is
+ # skipped when forwarding messages.
+ # 
+ # Note: this variable has no effect when the $autoedit
+ # variable is set.
+ # 
+ # 
+ # set fcc_attach=yes
+ #
+ # Name: fcc_attach
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether or not attachments on outgoing messages
+ # are saved along with the main body of your message.
+ # 
+ # 
+ # set fcc_clear=no
+ #
+ # Name: fcc_clear
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When this variable is set, FCCs will be stored unencrypted and
+ # unsigned, even when the actual message is encrypted and/or
+ # signed.
+ # (PGP only)
+ # 
+ # 
+ # set folder="~/Mail"
+ #
+ # Name: folder
+ # Type: path
+ # Default: "~/Mail"
+ # 
+ # 
+ # Specifies the default location of your mailboxes.  A ``+'' or ``='' at the
+ # beginning of a pathname will be expanded to the value of this
+ # variable.  Note that if you change this variable (from the default)
+ # value you need to make sure that the assignment occurs before
+ # you use ``+'' or ``='' for any other variables since expansion takes place
+ # when handling the ``mailboxes'' command.
+ # 
+ # 
+ # set folder_format="%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %f"
+ #
+ # Name: folder_format
+ # Type: string
+ # Default: "%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %f"
+ # 
+ # 
+ # This variable allows you to customize the file browser display to your
+ # personal taste.  This string is similar to $index_format, but has
+ # its own set of printf(3)-like sequences:
+ # %C      current file number
+ # %d      date/time folder was last modified
+ # %f      filename (``/'' is appended to directory names,
+ #         ``@'' to symbolic links and ``*'' to executable
+ #         files)
+ # %F      file permissions
+ # %g      group name (or numeric gid, if missing)
+ # %l      number of hard links
+ # %N      N if folder has new mail, blank otherwise
+ # %s      size in bytes
+ # %t      ``*'' if the file is tagged, blank otherwise
+ # %u      owner name (or numeric uid, if missing)
+ # %>X     right justify the rest of the string and pad with character ``X''
+ # %|X     pad to the end of the line with character ``X''
+ # %*X     soft-fill with character ``X'' as pad
+ # 
+ # 
+ # For an explanation of ``soft-fill'', see the $index_format documentation.
+ # 
+ # 
+ # set followup_to=yes
+ #
+ # Name: followup_to
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether or not the ``Mail-Followup-To:'' header field is
+ # generated when sending mail.  When set, Mutt will generate this
+ # field when you are replying to a known mailing list, specified with
+ # the ``subscribe'' or ``lists'' commands.
+ # 
+ # This field has two purposes.  First, preventing you from
+ # receiving duplicate copies of replies to messages which you send
+ # to mailing lists, and second, ensuring that you do get a reply
+ # separately for any messages sent to known lists to which you are
+ # not subscribed.
+ # 
+ # The header will contain only the list's address
+ # for subscribed lists, and both the list address and your own
+ # email address for unsubscribed lists.  Without this header, a
+ # group reply to your message sent to a subscribed list will be
+ # sent to both the list and your address, resulting in two copies
+ # of the same email for you.
+ # 
+ # 
+ # set force_name=no
+ #
+ # Name: force_name
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable is similar to $save_name, except that Mutt will
+ # store a copy of your outgoing message by the username of the address
+ # you are sending to even if that mailbox does not exist.
+ # 
+ # Also see the $record variable.
+ # 
+ # 
+ # set forward_decode=yes
+ #
+ # Name: forward_decode
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls the decoding of complex MIME messages into text/plain when
+ # forwarding a message.  The message header is also RFC2047 decoded.
+ # This variable is only used, if $mime_forward is unset,
+ # otherwise $mime_forward_decode is used instead.
+ # 
+ # 
+ # set forward_decrypt=yes
+ #
+ # Name: forward_decrypt
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls the handling of encrypted messages when forwarding a message.
+ # When set, the outer layer of encryption is stripped off.  This
+ # variable is only used if $mime_forward is set and
+ # $mime_forward_decode is unset.
+ # (PGP only)
+ # 
+ # 
+ # set forward_edit=yes
+ #
+ # Name: forward_edit
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # This quadoption controls whether or not the user is automatically
+ # placed in the editor when forwarding messages.  For those who always want
+ # to forward with no modification, use a setting of ``no''.
+ # 
+ # 
+ # set forward_format="[%a: %s]"
+ #
+ # Name: forward_format
+ # Type: string
+ # Default: "[%a: %s]"
+ # 
+ # 
+ # This variable controls the default subject when forwarding a message.
+ # It uses the same format sequences as the $index_format variable.
+ # 
+ # 
+ # set forward_quote=no
+ #
+ # Name: forward_quote
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, forwarded messages included in the main body of the
+ # message (when $mime_forward is unset) will be quoted using
+ # $indent_string.
+ # 
+ # 
+ # set from=""
+ #
+ # Name: from
+ # Type: e-mail address
+ # Default: ""
+ # 
+ # 
+ # When set, this variable contains a default from address.  It
+ # can be overridden using ``my_hdr'' (including from a ``send-hook'') and
+ # $reverse_name.  This variable is ignored if $use_from is unset.
+ # 
+ # This setting defaults to the contents of the environment variable $EMAIL.
+ # 
+ # 
+ # set gecos_mask="^[^,]*"
+ #
+ # Name: gecos_mask
+ # Type: regular expression
+ # Default: "^[^,]*"
+ # 
+ # 
+ # A regular expression used by mutt to parse the GECOS field of a password
+ # entry when expanding the alias.  The default value
+ # will return the string up to the first ``,'' encountered.
+ # If the GECOS field contains a string like ``lastname, firstname'' then you
+ # should set it to ``.*''.
+ # 
+ # This can be useful if you see the following behavior: you address an e-mail
+ # to user ID ``stevef'' whose full name is ``Steve Franklin''.  If mutt expands
+ # ``stevef'' to ``"Franklin" stevef@foo.bar'' then you should set the $gecos_mask to
+ # a regular expression that will match the whole name so mutt will expand
+ # ``Franklin'' to ``Franklin, Steve''.
+ # 
+ # 
+ # set hdrs=yes
+ #
+ # Name: hdrs
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When unset, the header fields normally added by the ``my_hdr''
+ # command are not created.  This variable must be unset before
+ # composing a new message or replying in order to take effect.  If set,
+ # the user defined header fields are added to every new message.
+ # 
+ # 
+ # set header=no
+ #
+ # Name: header
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, this variable causes Mutt to include the header
+ # of the message you are replying to into the edit buffer.
+ # The $weed setting applies.
+ # 
+ # 
+ # set header_cache=""
+ #
+ # Name: header_cache
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This variable points to the header cache database.
+ # If pointing to a directory Mutt will contain a header cache
+ # database file per folder, if pointing to a file that file will
+ # be a single global header cache. By default it is unset so no header
+ # caching will be used.
+ # 
+ # Header caching can greatly improve speed when opening POP, IMAP
+ # MH or Maildir folders, see ``caching'' for details.
+ # 
+ # 
+ # set header_cache_compress=yes
+ #
+ # Name: header_cache_compress
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When mutt is compiled with qdbm or tokyocabinet as header cache backend,
+ # this option determines whether the database will be compressed.
+ # Compression results in database files roughly being one fifth
+ # of the usual diskspace, but the decompression can result in a
+ # slower opening of cached folder(s) which in general is still
+ # much faster than opening non header cached folders.
+ # 
+ # 
+ # set header_cache_pagesize="16384"
+ #
+ # Name: header_cache_pagesize
+ # Type: string
+ # Default: "16384"
+ # 
+ # 
+ # When mutt is compiled with either gdbm or bdb4 as the header cache backend,
+ # this option changes the database page size.  Too large or too small
+ # values can waste space, memory, or CPU time. The default should be more
+ # or less optimal for most use cases.
+ # 
+ # 
+ # set help=yes
+ #
+ # Name: help
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, help lines describing the bindings for the major functions
+ # provided by each menu are displayed on the first line of the screen.
+ # 
+ # Note: The binding will not be displayed correctly if the
+ # function is bound to a sequence rather than a single keystroke.  Also,
+ # the help line may not be updated if a binding is changed while Mutt is
+ # running.  Since this variable is primarily aimed at new users, neither
+ # of these should present a major problem.
+ # 
+ # 
+ # set hidden_host=no
+ #
+ # Name: hidden_host
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will skip the host name part of $hostname variable
+ # when adding the domain part to addresses.  This variable does not
+ # affect the generation of Message-IDs, and it will not lead to the
+ # cut-off of first-level domains.
+ # 
+ # 
+ # set hide_limited=no
+ #
+ # Name: hide_limited
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will not show the presence of messages that are hidden
+ # by limiting, in the thread tree.
+ # 
+ # 
+ # set hide_missing=yes
+ #
+ # Name: hide_missing
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will not show the presence of missing messages in the
+ # thread tree.
+ # 
+ # 
+ # set hide_thread_subject=yes
+ #
+ # Name: hide_thread_subject
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will not show the subject of messages in the thread
+ # tree that have the same subject as their parent or closest previously
+ # displayed sibling.
+ # 
+ # 
+ # set hide_top_limited=no
+ #
+ # Name: hide_top_limited
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will not show the presence of messages that are hidden
+ # by limiting, at the top of threads in the thread tree.  Note that when
+ # $hide_limited is set, this option will have no effect.
+ # 
+ # 
+ # set hide_top_missing=yes
+ #
+ # Name: hide_top_missing
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will not show the presence of missing messages at the
+ # top of threads in the thread tree.  Note that when $hide_missing is
+ # set, this option will have no effect.
+ # 
+ # 
+ # set history=10
+ #
+ # Name: history
+ # Type: number
+ # Default: 10
+ # 
+ # 
+ # This variable controls the size (in number of strings remembered) of
+ # the string history buffer per category. The buffer is cleared each time the
+ # variable is set.
+ # 
+ # 
+ # set history_file="~/.mutthistory"
+ #
+ # Name: history_file
+ # Type: path
+ # Default: "~/.mutthistory"
+ # 
+ # 
+ # The file in which Mutt will save its history.
+ # 
+ # 
+ # set honor_disposition=no
+ #
+ # Name: honor_disposition
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, Mutt will not display attachments with a
+ # disposition of ``attachment'' inline even if it could
+ # render the part to plain text. These MIME parts can only
+ # be viewed from the attachment menu.
+ # 
+ # If unset, Mutt will render all MIME parts it can
+ # properly transform to plain text.
+ # 
+ # 
+ # set honor_followup_to=yes
+ #
+ # Name: honor_followup_to
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether or not a Mail-Followup-To header is
+ # honored when group-replying to a message.
+ # 
+ # 
+ # set hostname=""
+ #
+ # Name: hostname
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Specifies the fully-qualified hostname of the system mutt is running on
+ # containing the host's name and the DNS domain it belongs to. It is used
+ # as the domain part (after ``@'') for local email addresses as well as
+ # Message-Id headers.
+ # 
+ # Its value is determined at startup as follows: If the node's name
+ # as returned by the uname(3) function contains the hostname and the
+ # domain, these are used to construct $hostname. If there is no
+ # domain part returned, Mutt will look for a ``domain'' or ``search''
+ # line in /etc/resolv.conf to determine the domain. Optionally, Mutt
+ # can be compiled with a fixed domain name in which case a detected
+ # one is not used.
+ # 
+ # Also see $use_domain and $hidden_host.
+ # 
+ # 
+ # set ignore_linear_white_space=no
+ #
+ # Name: ignore_linear_white_space
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This option replaces linear-white-space between encoded-word
+ # and text to a single space to prevent the display of MIME-encoded
+ # ``Subject:'' field from being divided into multiple lines.
+ # 
+ # 
+ # set ignore_list_reply_to=no
+ #
+ # Name: ignore_list_reply_to
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Affects the behavior of the <reply> function when replying to
+ # messages from mailing lists (as defined by the ``subscribe'' or
+ # ``lists'' commands).  When set, if the ``Reply-To:'' field is
+ # set to the same value as the ``To:'' field, Mutt assumes that the
+ # ``Reply-To:'' field was set by the mailing list to automate responses
+ # to the list, and will ignore this field.  To direct a response to the
+ # mailing list when this option is set, use the <list-reply>
+ # function; <group-reply> will reply to both the sender and the
+ # list.
+ # 
+ # 
+ # set imap_authenticators=""
+ #
+ # Name: imap_authenticators
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This is a colon-delimited list of authentication methods mutt may
+ # attempt to use to log in to an IMAP server, in the order mutt should
+ # try them.  Authentication methods are either ``login'' or the right
+ # side of an IMAP ``AUTH=xxx'' capability string, e.g. ``digest-md5'', ``gssapi''
+ # or ``cram-md5''. This option is case-insensitive. If it's
+ # unset (the default) mutt will try all available methods,
+ # in order from most-secure to least-secure.
+ # 
+ # Example:
+ # set imap_authenticators="gssapi:cram-md5:login"
+ # 
+ # Note: Mutt will only fall back to other authentication methods if
+ # the previous methods are unavailable. If a method is available but
+ # authentication fails, mutt will not connect to the IMAP server.
+ # 
+ # 
+ # set imap_check_subscribed=no
+ #
+ # Name: imap_check_subscribed
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will fetch the set of subscribed folders from
+ # your server on connection, and add them to the set of mailboxes
+ # it polls for new mail just as if you had issued individual ``mailboxes''
+ # commands.
+ # 
+ # 
+ # set imap_delim_chars="/."
+ #
+ # Name: imap_delim_chars
+ # Type: string
+ # Default: "/."
+ # 
+ # 
+ # This contains the list of characters which you would like to treat
+ # as folder separators for displaying IMAP paths. In particular it
+ # helps in using the ``='' shortcut for your folder variable.
+ # 
+ # 
+ # set imap_headers=""
+ #
+ # Name: imap_headers
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Mutt requests these header fields in addition to the default headers
+ # (``Date:'', ``From:'', ``Subject:'', ``To:'', ``Cc:'', ``Message-Id:'',
+ # ``References:'', ``Content-Type:'', ``Content-Description:'', ``In-Reply-To:'',
+ # ``Reply-To:'', ``Lines:'', ``List-Post:'', ``X-Label:'') from IMAP
+ # servers before displaying the index menu. You may want to add more
+ # headers for spam detection.
+ # 
+ # Note: This is a space separated list, items should be uppercase
+ # and not contain the colon, e.g. ``X-BOGOSITY X-SPAM-STATUS'' for the
+ # ``X-Bogosity:'' and ``X-Spam-Status:'' header fields.
+ # 
+ # 
+ # set imap_idle=no
+ #
+ # Name: imap_idle
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will attempt to use the IMAP IDLE extension
+ # to check for new mail in the current mailbox. Some servers
+ # (dovecot was the inspiration for this option) react badly
+ # to mutt's implementation. If your connection seems to freeze
+ # up periodically, try unsetting this.
+ # 
+ # 
+ # set imap_keepalive=900
+ #
+ # Name: imap_keepalive
+ # Type: number
+ # Default: 900
+ # 
+ # 
+ # This variable specifies the maximum amount of time in seconds that mutt
+ # will wait before polling open IMAP connections, to prevent the server
+ # from closing them before mutt has finished with them. The default is
+ # well within the RFC-specified minimum amount of time (30 minutes) before
+ # a server is allowed to do this, but in practice the RFC does get
+ # violated every now and then. Reduce this number if you find yourself
+ # getting disconnected from your IMAP server due to inactivity.
+ # 
+ # 
+ # set imap_list_subscribed=no
+ #
+ # Name: imap_list_subscribed
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable configures whether IMAP folder browsing will look for
+ # only subscribed folders or all folders.  This can be toggled in the
+ # IMAP browser with the <toggle-subscribed> function.
+ # 
+ # 
+ # set imap_login=""
+ #
+ # Name: imap_login
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Your login name on the IMAP server.
+ # 
+ # This variable defaults to the value of $imap_user.
+ # 
+ # 
+ # set imap_pass=""
+ #
+ # Name: imap_pass
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Specifies the password for your IMAP account.  If unset, Mutt will
+ # prompt you for your password when you invoke the <imap-fetch-mail> function
+ # or try to open an IMAP folder.
+ # 
+ # Warning: you should only use this option when you are on a
+ # fairly secure machine, because the superuser can read your muttrc even
+ # if you are the only one who can read the file.
+ # 
+ # 
+ # set imap_passive=yes
+ #
+ # Name: imap_passive
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will not open new IMAP connections to check for new
+ # mail.  Mutt will only check for new mail over existing IMAP
+ # connections.  This is useful if you don't want to be prompted to
+ # user/password pairs on mutt invocation, or if opening the connection
+ # is slow.
+ # 
+ # 
+ # set imap_peek=yes
+ #
+ # Name: imap_peek
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will avoid implicitly marking your mail as read whenever
+ # you fetch a message from the server. This is generally a good thing,
+ # but can make closing an IMAP folder somewhat slower. This option
+ # exists to appease speed freaks.
+ # 
+ # 
+ # set imap_pipeline_depth=15
+ #
+ # Name: imap_pipeline_depth
+ # Type: number
+ # Default: 15
+ # 
+ # 
+ # Controls the number of IMAP commands that may be queued up before they
+ # are sent to the server. A deeper pipeline reduces the amount of time
+ # mutt must wait for the server, and can make IMAP servers feel much
+ # more responsive. But not all servers correctly handle pipelined commands,
+ # so if you have problems you might want to try setting this variable to 0.
+ # 
+ # Note: Changes to this variable have no effect on open connections.
+ # 
+ # 
+ # set imap_servernoise=yes
+ #
+ # Name: imap_servernoise
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will display warning messages from the IMAP
+ # server as error messages. Since these messages are often
+ # harmless, or generated due to configuration problems on the
+ # server which are out of the users' hands, you may wish to suppress
+ # them at some point.
+ # 
+ # 
+ # set imap_user=""
+ #
+ # Name: imap_user
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # The name of the user whose mail you intend to access on the IMAP
+ # server.
+ # 
+ # This variable defaults to your user name on the local machine.
+ # 
+ # 
+ # set implicit_autoview=no
+ #
+ # Name: implicit_autoview
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set to ``yes'', mutt will look for a mailcap entry with the
+ # ``copiousoutput'' flag set for every MIME attachment it doesn't have
+ # an internal viewer defined for.  If such an entry is found, mutt will
+ # use the viewer defined in that entry to convert the body part to text
+ # form.
+ # 
+ # 
+ # set include=ask-yes
+ #
+ # Name: include
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether or not a copy of the message(s) you are replying to
+ # is included in your reply.
+ # 
+ # 
+ # set include_onlyfirst=no
+ #
+ # Name: include_onlyfirst
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Controls whether or not Mutt includes only the first attachment
+ # of the message you are replying.
+ # 
+ # 
+ # set indent_string="> "
+ #
+ # Name: indent_string
+ # Type: string
+ # Default: "> "
+ # 
+ # 
+ # Specifies the string to prepend to each line of text quoted in a
+ # message to which you are replying.  You are strongly encouraged not to
+ # change this value, as it tends to agitate the more fanatical netizens.
+ # 
+ # The value of this option is ignored if $text_flowed is set, too because
+ # the quoting mechanism is strictly defined for format=flowed.
+ # 
+ # This option is a format string, please see the description of
+ # $index_format for supported printf(3)-style sequences.
+ # 
+ # 
+ # set index_format="%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s"
+ #
+ # Name: index_format
+ # Type: string
+ # Default: "%4C %Z %{%b %d} %-15.15L (%?l?%4l&%4c?) %s"
+ # 
+ # 
+ # This variable allows you to customize the message index display to
+ # your personal taste.
+ # 
+ # ``Format strings'' are similar to the strings used in the C
+ # function printf(3) to format output (see the man page for more details).
+ # The following sequences are defined in Mutt:
+ # %a      address of the author
+ # %A      reply-to address (if present; otherwise: address of author)
+ # %b      filename of the original message folder (think mailbox)
+ # %B      the list to which the letter was sent, or else the folder name (%b).
+ # %c      number of characters (bytes) in the message
+ # %C      current message number
+ # %d      date and time of the message in the format specified by
+ # $date_format         converted to sender's time zone
+ # %D      date and time of the message in the format specified by
+ # $date_format         converted to the local time zone
+ # %e      current message number in thread
+ # %E      number of messages in current thread
+ # %f      sender (address + real name), either From: or Return-Path:
+ # %F      author name, or recipient name if the message is from you
+ # %H      spam attribute(s) of this message
+ # %i      message-id of the current message
+ # %l      number of lines in the message (does not work with maildir,
+ #         mh, and possibly IMAP folders)
+ # %L      If an address in the ``To:'' or ``Cc:'' header field matches an address
+ #         defined by the users ``subscribe'' command, this displays
+ #         "To <list-name>", otherwise the same as %F.
+ # %m      total number of message in the mailbox
+ # %M      number of hidden messages if the thread is collapsed.
+ # %N      message score
+ # %n      author's real name (or address if missing)
+ # %O      original save folder where mutt would formerly have
+ #         stashed the message: list name or recipient name
+ #         if not sent to a list
+ # %P      progress indicator for the built-in pager (how much of the file has been displayed)
+ # %s      subject of the message
+ # %S      status of the message (``N''/``D''/``d''/``!''/``r''/*)
+ # %t      ``To:'' field (recipients)
+ # %T      the appropriate character from the $to_chars string
+ # %u      user (login) name of the author
+ # %v      first name of the author, or the recipient if the message is from you
+ # %X      number of attachments
+ #         (please see the ``attachments'' section for possible speed effects)
+ # %y      ``X-Label:'' field, if present
+ # %Y      ``X-Label:'' field, if present, and (1) not at part of a thread tree,
+ #         (2) at the top of a thread, or (3) ``X-Label:'' is different from
+ #         preceding message's ``X-Label:''.
+ # %Z      message status flags
+ # %{fmt}  the date and time of the message is converted to sender's
+ #         time zone, and ``fmt'' is expanded by the library function
+ #         strftime(3); a leading bang disables locales
+ # %[fmt]  the date and time of the message is converted to the local
+ #         time zone, and ``fmt'' is expanded by the library function
+ #         strftime(3); a leading bang disables locales
+ # %(fmt)  the local date and time when the message was received.
+ #         ``fmt'' is expanded by the library function strftime(3);
+ #         a leading bang disables locales
+ # %<fmt>  the current local time. ``fmt'' is expanded by the library
+ #         function strftime(3); a leading bang disables locales.
+ # %>X     right justify the rest of the string and pad with character ``X''
+ # %|X     pad to the end of the line with character ``X''
+ # %*X     soft-fill with character ``X'' as pad
+ # 
+ # 
+ # ``Soft-fill'' deserves some explanation: Normal right-justification
+ # will print everything to the left of the ``%>'', displaying padding and
+ # whatever lies to the right only if there's room. By contrast,
+ # soft-fill gives priority to the right-hand side, guaranteeing space
+ # to display it and showing padding only if there's still room. If
+ # necessary, soft-fill will eat text leftwards to make room for
+ # rightward text.
+ # 
+ # Note that these expandos are supported in
+ # ``save-hook'', ``fcc-hook'' and ``fcc-save-hook'', too.
+ # 
+ # 
+ # set ispell="/usr/bin/ispell"
+ #
+ # Name: ispell
+ # Type: path
+ # Default: "/usr/bin/ispell"
+ # 
+ # 
+ # How to invoke ispell (GNU's spell-checking software).
+ # 
+ # 
+ # set keep_flagged=no
+ #
+ # Name: keep_flagged
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, read messages marked as flagged will not be moved
+ # from your spool mailbox to your $mbox mailbox, or as a result of
+ # a ``mbox-hook'' command.
+ # 
+ # 
+ # set locale="C"
+ #
+ # Name: locale
+ # Type: string
+ # Default: "C"
+ # 
+ # 
+ # The locale used by strftime(3) to format dates. Legal values are
+ # the strings your system accepts for the locale environment variable $LC_TIME.
+ # 
+ # 
+ # set mail_check=5
+ #
+ # Name: mail_check
+ # Type: number
+ # Default: 5
+ # 
+ # 
+ # This variable configures how often (in seconds) mutt should look for
+ # new mail. Also see the $timeout variable.
+ # 
+ # 
+ # set mailcap_path=""
+ #
+ # Name: mailcap_path
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable specifies which files to consult when attempting to
+ # display MIME bodies not directly supported by Mutt.
+ # 
+ # 
+ # set mailcap_sanitize=yes
+ #
+ # Name: mailcap_sanitize
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, mutt will restrict possible characters in mailcap % expandos
+ # to a well-defined set of safe characters.  This is the safe setting,
+ # but we are not sure it doesn't break some more advanced MIME stuff.
+ # 
+ # DON'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
+ # DOING!
+ # 
+ # 
+ # set maildir_header_cache_verify=yes
+ #
+ # Name: maildir_header_cache_verify
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Check for Maildir unaware programs other than mutt having modified maildir
+ # files when the header cache is in use.  This incurs one stat(2) per
+ # message every time the folder is opened (which can be very slow for NFS
+ # folders).
+ # 
+ # 
+ # set maildir_trash=no
+ #
+ # Name: maildir_trash
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, messages marked as deleted will be saved with the maildir
+ # trashed flag instead of unlinked.  Note: this only applies
+ # to maildir-style mailboxes.  Setting it will have no effect on other
+ # mailbox types.
+ # 
+ # 
+ # set mark_old=yes
+ #
+ # Name: mark_old
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether or not mutt marks new unread
+ # messages as old if you exit a mailbox without reading them.
+ # With this option set, the next time you start mutt, the messages
+ # will show up with an ``O'' next to them in the index menu,
+ # indicating that they are old.
+ # 
+ # 
+ # set markers=yes
+ #
+ # Name: markers
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls the display of wrapped lines in the internal pager. If set, a
+ # ``+'' marker is displayed at the beginning of wrapped lines.
+ # 
+ # Also see the $smart_wrap variable.
+ # 
+ # 
+ # set mask="!^\\.[^.]"
+ #
+ # Name: mask
+ # Type: regular expression
+ # Default: "!^\\.[^.]"
+ # 
+ # 
+ # A regular expression used in the file browser, optionally preceded by
+ # the not operator ``!''.  Only files whose names match this mask
+ # will be shown. The match is always case-sensitive.
+ # 
+ # 
+ # set mbox="~/mbox"
+ #
+ # Name: mbox
+ # Type: path
+ # Default: "~/mbox"
+ # 
+ # 
+ # This specifies the folder into which read mail in your $spoolfile
+ # folder will be appended.
+ # 
+ # Also see the $move variable.
+ # 
+ # 
+ # set mbox_type=mbox
+ #
+ # Name: mbox_type
+ # Type: folder magic
+ # Default: mbox
+ # 
+ # 
+ # The default mailbox type used when creating new folders. May be any of
+ # ``mbox'', ``MMDF'', ``MH'' and ``Maildir''. This is overridden by the
+ # -m command-line option.
+ # 
+ # 
+ # set menu_context=0
+ #
+ # Name: menu_context
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # This variable controls the number of lines of context that are given
+ # when scrolling through menus. (Similar to $pager_context.)
+ # 
+ # 
+ # set menu_move_off=yes
+ #
+ # Name: menu_move_off
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When unset, the bottom entry of menus will never scroll up past
+ # the bottom of the screen, unless there are less entries than lines.
+ # When set, the bottom entry may move off the bottom.
+ # 
+ # 
+ # set menu_scroll=no
+ #
+ # Name: menu_scroll
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, menus will be scrolled up or down one line when you
+ # attempt to move across a screen boundary.  If unset, the screen
+ # is cleared and the next or previous page of the menu is displayed
+ # (useful for slow links to avoid many redraws).
+ # 
+ # 
+ # set message_cache_clean=no
+ #
+ # Name: message_cache_clean
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, mutt will clean out obsolete entries from the message cache when
+ # the mailbox is synchronized. You probably only want to set it
+ # every once in a while, since it can be a little slow
+ # (especially for large folders).
+ # 
+ # 
+ # set message_cachedir=""
+ #
+ # Name: message_cachedir
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # Set this to a directory and mutt will cache copies of messages from
+ # your IMAP and POP servers here. You are free to remove entries at any
+ # time.
+ # 
+ # When setting this variable to a directory, mutt needs to fetch every
+ # remote message only once and can perform regular expression searches
+ # as fast as for local folders.
+ # 
+ # Also see the $message_cache_clean variable.
+ # 
+ # 
+ # set message_format="%s"
+ #
+ # Name: message_format
+ # Type: string
+ # Default: "%s"
+ # 
+ # 
+ # This is the string displayed in the ``attachment'' menu for
+ # attachments of type message/rfc822.  For a full listing of defined
+ # printf(3)-like sequences see the section on $index_format.
+ # 
+ # 
+ # set meta_key=no
+ #
+ # Name: meta_key
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, forces Mutt to interpret keystrokes with the high bit (bit 8)
+ # set as if the user had pressed the Esc key and whatever key remains
+ # after having the high bit removed.  For example, if the key pressed
+ # has an ASCII value of 0xf8, then this is treated as if the user had
+ # pressed Esc then ``x''.  This is because the result of removing the
+ # high bit from 0xf8 is 0x78, which is the ASCII character
+ # ``x''.
+ # 
+ # 
+ # set metoo=no
+ #
+ # Name: metoo
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If unset, Mutt will remove your address (see the ``alternates''
+ # command) from the list of recipients when replying to a message.
+ # 
+ # 
+ # set mh_purge=no
+ #
+ # Name: mh_purge
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When unset, mutt will mimic mh's behavior and rename deleted messages
+ # to ,<old file name> in mh folders instead of really deleting
+ # them. This leaves the message on disk but makes programs reading the folder
+ # ignore it. If the variable is set, the message files will simply be
+ # deleted.
+ # 
+ # This option is similar to $maildir_trash for Maildir folders.
+ # 
+ # 
+ # set mh_seq_flagged="flagged"
+ #
+ # Name: mh_seq_flagged
+ # Type: string
+ # Default: "flagged"
+ # 
+ # 
+ # The name of the MH sequence used for flagged messages.
+ # 
+ # 
+ # set mh_seq_replied="replied"
+ #
+ # Name: mh_seq_replied
+ # Type: string
+ # Default: "replied"
+ # 
+ # 
+ # The name of the MH sequence used to tag replied messages.
+ # 
+ # 
+ # set mh_seq_unseen="unseen"
+ #
+ # Name: mh_seq_unseen
+ # Type: string
+ # Default: "unseen"
+ # 
+ # 
+ # The name of the MH sequence used for unseen messages.
+ # 
+ # 
+ # set mime_forward=no
+ #
+ # Name: mime_forward
+ # Type: quadoption
+ # Default: no
+ # 
+ # 
+ # When set, the message you are forwarding will be attached as a
+ # separate message/rfc822 MIME part instead of included in the main body of the
+ # message.  This is useful for forwarding MIME messages so the receiver
+ # can properly view the message as it was delivered to you. If you like
+ # to switch between MIME and not MIME from mail to mail, set this
+ # variable to ``ask-no'' or ``ask-yes''.
+ # 
+ # Also see $forward_decode and $mime_forward_decode.
+ # 
+ # 
+ # set mime_forward_decode=no
+ #
+ # Name: mime_forward_decode
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Controls the decoding of complex MIME messages into text/plain when
+ # forwarding a message while $mime_forward is set. Otherwise
+ # $forward_decode is used instead.
+ # 
+ # 
+ # set mime_forward_rest=yes
+ #
+ # Name: mime_forward_rest
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # When forwarding multiple attachments of a MIME message from the attachment
+ # menu, attachments which cannot be decoded in a reasonable manner will
+ # be attached to the newly composed message if this option is set.
+ # 
+ # 
+ # set mix_entry_format="%4n %c %-16s %a"
+ #
+ # Name: mix_entry_format
+ # Type: string
+ # Default: "%4n %c %-16s %a"
+ # 
+ # 
+ # This variable describes the format of a remailer line on the mixmaster
+ # chain selection screen.  The following printf(3)-like sequences are
+ # supported:
+ # %n      The running number on the menu.
+ # %c      Remailer capabilities.
+ # %s      The remailer's short name.
+ # %a      The remailer's e-mail address.
+ # 
+ # 
+ # set mixmaster="mixmaster"
+ #
+ # Name: mixmaster
+ # Type: path
+ # Default: "mixmaster"
+ # 
+ # 
+ # This variable contains the path to the Mixmaster binary on your
+ # system.  It is used with various sets of parameters to gather the
+ # list of known remailers, and to finally send a message through the
+ # mixmaster chain.
+ # 
+ # 
+ # set move=no
+ #
+ # Name: move
+ # Type: quadoption
+ # Default: no
+ # 
+ # 
+ # Controls whether or not Mutt will move read messages
+ # from your spool mailbox to your $mbox mailbox, or as a result of
+ # a ``mbox-hook'' command.
+ # 
+ # 
+ # set narrow_tree=no
+ #
+ # Name: narrow_tree
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable, when set, makes the thread tree narrower, allowing
+ # deeper threads to fit on the screen.
+ # 
+ # 
+ # set net_inc=10
+ #
+ # Name: net_inc
+ # Type: number
+ # Default: 10
+ # 
+ # 
+ # Operations that expect to transfer a large amount of data over the
+ # network will update their progress every $net_inc kilobytes.
+ # If set to 0, no progress messages will be displayed.
+ # 
+ # See also $read_inc, $write_inc and $net_inc.
+ # 
+ # 
+ # set pager="builtin"
+ #
+ # Name: pager
+ # Type: path
+ # Default: "builtin"
+ # 
+ # 
+ # This variable specifies which pager you would like to use to view
+ # messages. The value ``builtin'' means to use the built-in pager, otherwise this
+ # variable should specify the pathname of the external pager you would
+ # like to use.
+ # 
+ # Using an external pager may have some disadvantages: Additional
+ # keystrokes are necessary because you can't call mutt functions
+ # directly from the pager, and screen resizes cause lines longer than
+ # the screen width to be badly formatted in the help menu.
+ # 
+ # 
+ # set pager_context=0
+ #
+ # Name: pager_context
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # This variable controls the number of lines of context that are given
+ # when displaying the next or previous page in the internal pager.  By
+ # default, Mutt will display the line after the last one on the screen
+ # at the top of the next page (0 lines of context).
+ # 
+ # This variable also specifies the amount of context given for search
+ # results. If positive, this many lines will be given before a match,
+ # if 0, the match will be top-aligned.
+ # 
+ # 
+ # set pager_format="-%Z- %C/%m: %-20.20n   %s%*  -- (%P)"
+ #
+ # Name: pager_format
+ # Type: string
+ # Default: "-%Z- %C/%m: %-20.20n   %s%*  -- (%P)"
+ # 
+ # 
+ # This variable controls the format of the one-line message ``status''
+ # displayed before each message in either the internal or an external
+ # pager.  The valid sequences are listed in the $index_format
+ # section.
+ # 
+ # 
+ # set pager_index_lines=0
+ #
+ # Name: pager_index_lines
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # Determines the number of lines of a mini-index which is shown when in
+ # the pager.  The current message, unless near the top or bottom of the
+ # folder, will be roughly one third of the way down this mini-index,
+ # giving the reader the context of a few messages before and after the
+ # message.  This is useful, for example, to determine how many messages
+ # remain to be read in the current thread.  One of the lines is reserved
+ # for the status bar from the index, so a setting of 6
+ # will only show 5 lines of the actual index.  A value of 0 results in
+ # no index being shown.  If the number of messages in the current folder
+ # is less than $pager_index_lines, then the index will only use as
+ # many lines as it needs.
+ # 
+ # 
+ # set pager_stop=no
+ #
+ # Name: pager_stop
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, the internal-pager will not move to the next message
+ # when you are at the end of a message and invoke the <next-page>
+ # function.
+ # 
+ # 
+ # set pgp_auto_decode=no
+ #
+ # Name: pgp_auto_decode
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, mutt will automatically attempt to decrypt traditional PGP
+ # messages whenever the user performs an operation which ordinarily would
+ # result in the contents of the message being operated on.  For example,
+ # if the user displays a pgp-traditional message which has not been manually
+ # checked with the <check-traditional-pgp> function, mutt will automatically
+ # check the message for traditional pgp.
+ # 
+ # 
+ # set pgp_autoinline=no
+ #
+ # Name: pgp_autoinline
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This option controls whether Mutt generates old-style inline
+ # (traditional) PGP encrypted or signed messages under certain
+ # circumstances.  This can be overridden by use of the pgp menu,
+ # when inline is not required.
+ # 
+ # Note that Mutt might automatically use PGP/MIME for messages
+ # which consist of more than a single MIME part.  Mutt can be
+ # configured to ask before sending PGP/MIME messages when inline
+ # (traditional) would not work.
+ # 
+ # Also see the $pgp_mime_auto variable.
+ # 
+ # Also note that using the old-style PGP message format is strongly
+ # deprecated.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_check_exit=yes
+ #
+ # Name: pgp_check_exit
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, mutt will check the exit code of the PGP subprocess when
+ # signing or encrypting.  A non-zero exit code means that the
+ # subprocess failed.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_clearsign_command=""
+ #
+ # Name: pgp_clearsign_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This format is used to create an old-style ``clearsigned'' PGP
+ # message.  Note that the use of this format is strongly
+ # deprecated.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_decode_command=""
+ #
+ # Name: pgp_decode_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This format strings specifies a command which is used to decode
+ # application/pgp attachments.
+ # 
+ # The PGP command formats have their own set of printf(3)-like sequences:
+ # %p      Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
+ #         string otherwise. Note: This may be used with a %? construct.
+ # %f      Expands to the name of a file containing a message.
+ # %s      Expands to the name of a file containing the signature part
+ #                    of a multipart/signed attachment when verifying it.
+ # %a      The value of $pgp_sign_as.
+ # %r      One or more key IDs.
+ # 
+ # 
+ # For examples on how to configure these formats for the various versions
+ # of PGP which are floating around, see the pgp and gpg sample configuration files in
+ # the samples/ subdirectory which has been installed on your system
+ # alongside the documentation.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_decrypt_command=""
+ #
+ # Name: pgp_decrypt_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to decrypt a PGP encrypted message.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_encrypt_only_command=""
+ #
+ # Name: pgp_encrypt_only_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to encrypt a body part without signing it.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_encrypt_sign_command=""
+ #
+ # Name: pgp_encrypt_sign_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to both sign and encrypt a body part.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_entry_format="%4n %t%f %4l/0x%k %-4a %2c %u"
+ #
+ # Name: pgp_entry_format
+ # Type: string
+ # Default: "%4n %t%f %4l/0x%k %-4a %2c %u"
+ # 
+ # 
+ # This variable allows you to customize the PGP key selection menu to
+ # your personal taste. This string is similar to $index_format, but
+ # has its own set of printf(3)-like sequences:
+ # %n      number
+ # %k      key id
+ # %u      user id
+ # %a      algorithm
+ # %l      key length
+ # %f      flags
+ # %c      capabilities
+ # %t      trust/validity of the key-uid association
+ # %[<s>]  date of the key where <s> is an strftime(3) expression
+ # 
+ # 
+ # (PGP only)
+ # 
+ # 
+ # set pgp_export_command=""
+ #
+ # Name: pgp_export_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to export a public key from the user's
+ # key ring.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_getkeys_command=""
+ #
+ # Name: pgp_getkeys_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is invoked whenever mutt will need public key information.
+ # Of the sequences supported by $pgp_decode_command, %r is the only
+ # printf(3)-like sequence used with this format.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_good_sign=""
+ #
+ # Name: pgp_good_sign
+ # Type: regular expression
+ # Default: ""
+ # 
+ # 
+ # If you assign a text to this variable, then a PGP signature is only
+ # considered verified if the output from $pgp_verify_command contains
+ # the text. Use this variable if the exit code from the command is 0
+ # even for bad signatures.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_ignore_subkeys=yes
+ #
+ # Name: pgp_ignore_subkeys
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Setting this variable will cause Mutt to ignore OpenPGP subkeys. Instead,
+ # the principal key will inherit the subkeys' capabilities.  Unset this
+ # if you want to play interesting key selection games.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_import_command=""
+ #
+ # Name: pgp_import_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to import a key from a message into
+ # the user's public key ring.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_list_pubring_command=""
+ #
+ # Name: pgp_list_pubring_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to list the public key ring's contents.  The
+ # output format must be analogous to the one used by
+ # gpg --list-keys --with-colons.
+ # 
+ # This format is also generated by the pgpring utility which comes
+ # with mutt.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_list_secring_command=""
+ #
+ # Name: pgp_list_secring_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to list the secret key ring's contents.  The
+ # output format must be analogous to the one used by:
+ # gpg --list-keys --with-colons.
+ # 
+ # This format is also generated by the pgpring utility which comes
+ # with mutt.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_long_ids=no
+ #
+ # Name: pgp_long_ids
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, use 64 bit PGP key IDs, if unset use the normal 32 bit key IDs.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_mime_auto=ask-yes
+ #
+ # Name: pgp_mime_auto
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # This option controls whether Mutt will prompt you for
+ # automatically sending a (signed/encrypted) message using
+ # PGP/MIME when inline (traditional) fails (for any reason).
+ # 
+ # Also note that using the old-style PGP message format is strongly
+ # deprecated.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_replyinline=no
+ #
+ # Name: pgp_replyinline
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Setting this variable will cause Mutt to always attempt to
+ # create an inline (traditional) message when replying to a
+ # message which is PGP encrypted/signed inline.  This can be
+ # overridden by use of the pgp menu, when inline is not
+ # required.  This option does not automatically detect if the
+ # (replied-to) message is inline; instead it relies on Mutt
+ # internals for previously checked/flagged messages.
+ # 
+ # Note that Mutt might automatically use PGP/MIME for messages
+ # which consist of more than a single MIME part.  Mutt can be
+ # configured to ask before sending PGP/MIME messages when inline
+ # (traditional) would not work.
+ # 
+ # Also see the $pgp_mime_auto variable.
+ # 
+ # Also note that using the old-style PGP message format is strongly
+ # deprecated.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_retainable_sigs=no
+ #
+ # Name: pgp_retainable_sigs
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, signed and encrypted messages will consist of nested
+ # multipart/signed and multipart/encrypted body parts.
+ # 
+ # This is useful for applications like encrypted and signed mailing
+ # lists, where the outer layer (multipart/encrypted) can be easily
+ # removed, while the inner multipart/signed part is retained.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_show_unusable=yes
+ #
+ # Name: pgp_show_unusable
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, mutt will display non-usable keys on the PGP key selection
+ # menu.  This includes keys which have been revoked, have expired, or
+ # have been marked as ``disabled'' by the user.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_sign_as=""
+ #
+ # Name: pgp_sign_as
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # If you have more than one key pair, this option allows you to specify
+ # which of your private keys to use.  It is recommended that you use the
+ # keyid form to specify your key (e.g. 0x00112233).
+ # (PGP only)
+ # 
+ # 
+ # set pgp_sign_command=""
+ #
+ # Name: pgp_sign_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to create the detached PGP signature for a
+ # multipart/signed PGP/MIME body part.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_sort_keys=address
+ #
+ # Name: pgp_sort_keys
+ # Type: sort order
+ # Default: address
+ # 
+ # 
+ # Specifies how the entries in the pgp menu are sorted. The
+ # following are legal values:
+ # address sort alphabetically by user id
+ # keyid   sort alphabetically by key id
+ # date    sort by key creation date
+ # trust   sort by the trust of the key
+ # 
+ # 
+ # If you prefer reverse order of the above values, prefix it with
+ # ``reverse-''.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_strict_enc=yes
+ #
+ # Name: pgp_strict_enc
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, Mutt will automatically encode PGP/MIME signed messages as
+ # quoted-printable.  Please note that unsetting this variable may
+ # lead to problems with non-verifyable PGP signatures, so only change
+ # this if you know what you are doing.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_timeout=300
+ #
+ # Name: pgp_timeout
+ # Type: number
+ # Default: 300
+ # 
+ # 
+ # The number of seconds after which a cached passphrase will expire if
+ # not used.
+ # (PGP only)
+ # 
+ # 
+ # set sidebar_delim="|"
+ #
+ # Name: sidebar_delim
+ # Type: string
+ # Default: "|"
+ # 
+ # 
+ # This specifies the delimiter between the sidebar (if visible) and 
+ # other screens.
+ # 
+ # 
+ # set sidebar_visible=no
+ #
+ # Name: sidebar_visible
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This specifies whether or not to show sidebar (left-side list of folders).
+ # 
+ # 
+ # set sidebar_sort=no
+ #
+ # Name: sidebar_sort
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This specifies whether or not to sort the sidebar alphabetically.
+ # 
+ # 
+ # set sidebar_width=0
+ #
+ # Name: sidebar_width
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # The width of the sidebar.
+ # 
+ # 
+ # set pgp_use_gpg_agent=no
+ #
+ # Name: pgp_use_gpg_agent
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, mutt will use a possibly-running gpg-agent(1) process.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_verify_command=""
+ #
+ # Name: pgp_verify_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to verify PGP signatures.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pgp_verify_key_command=""
+ #
+ # Name: pgp_verify_key_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to verify key information from the key selection
+ # menu.
+ # 
+ # This is a format string, see the $pgp_decode_command command for
+ # possible printf(3)-like sequences.
+ # (PGP only)
+ # 
+ # 
+ # set pipe_decode=no
+ #
+ # Name: pipe_decode
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Used in connection with the <pipe-message> command.  When unset,
+ # Mutt will pipe the messages without any preprocessing. When set, Mutt
+ # will weed headers and will attempt to decode the messages
+ # first.
+ # 
+ # 
+ # set pipe_sep="\n"
+ #
+ # Name: pipe_sep
+ # Type: string
+ # Default: "\n"
+ # 
+ # 
+ # The separator to add between messages when piping a list of tagged
+ # messages to an external Unix command.
+ # 
+ # 
+ # set pipe_split=no
+ #
+ # Name: pipe_split
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Used in connection with the <pipe-message> function following
+ # <tag-prefix>.  If this variable is unset, when piping a list of
+ # tagged messages Mutt will concatenate the messages and will pipe them
+ # all concatenated.  When set, Mutt will pipe the messages one by one.
+ # In both cases the messages are piped in the current sorted order,
+ # and the $pipe_sep separator is added after each message.
+ # 
+ # 
+ # set pop_auth_try_all=yes
+ #
+ # Name: pop_auth_try_all
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, Mutt will try all available authentication methods.
+ # When unset, Mutt will only fall back to other authentication
+ # methods if the previous methods are unavailable. If a method is
+ # available but authentication fails, Mutt will not connect to the POP server.
+ # 
+ # 
+ # set pop_authenticators=""
+ #
+ # Name: pop_authenticators
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This is a colon-delimited list of authentication methods mutt may
+ # attempt to use to log in to an POP server, in the order mutt should
+ # try them.  Authentication methods are either ``user'', ``apop'' or any
+ # SASL mechanism, e.g. ``digest-md5'', ``gssapi'' or ``cram-md5''.
+ # This option is case-insensitive. If this option is unset
+ # (the default) mutt will try all available methods, in order from
+ # most-secure to least-secure.
+ # 
+ # Example:
+ # set pop_authenticators="digest-md5:apop:user"
+ # 
+ # 
+ # set pop_checkinterval=60
+ #
+ # Name: pop_checkinterval
+ # Type: number
+ # Default: 60
+ # 
+ # 
+ # This variable configures how often (in seconds) mutt should look for
+ # new mail in the currently selected mailbox if it is a POP mailbox.
+ # 
+ # 
+ # set pop_delete=ask-no
+ #
+ # Name: pop_delete
+ # Type: quadoption
+ # Default: ask-no
+ # 
+ # 
+ # If set, Mutt will delete successfully downloaded messages from the POP
+ # server when using the <fetch-mail> function.  When unset, Mutt will
+ # download messages but also leave them on the POP server.
+ # 
+ # 
+ # set pop_host=""
+ #
+ # Name: pop_host
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # The name of your POP server for the <fetch-mail> function.  You
+ # can also specify an alternative port, username and password, i.e.:
+ # [pop[s]://][username[:password]@]popserver[:port]
+ # 
+ # where ``[...]'' denotes an optional part.
+ # 
+ # 
+ # set pop_last=no
+ #
+ # Name: pop_last
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If this variable is set, mutt will try to use the ``LAST'' POP command
+ # for retrieving only unread messages from the POP server when using
+ # the <fetch-mail> function.
+ # 
+ # 
+ # set pop_pass=""
+ #
+ # Name: pop_pass
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Specifies the password for your POP account.  If unset, Mutt will
+ # prompt you for your password when you open a POP mailbox.
+ # 
+ # Warning: you should only use this option when you are on a
+ # fairly secure machine, because the superuser can read your muttrc
+ # even if you are the only one who can read the file.
+ # 
+ # 
+ # set pop_reconnect=ask-yes
+ #
+ # Name: pop_reconnect
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether or not Mutt will try to reconnect to the POP server if
+ # the connection is lost.
+ # 
+ # 
+ # set pop_user=""
+ #
+ # Name: pop_user
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Your login name on the POP server.
+ # 
+ # This variable defaults to your user name on the local machine.
+ # 
+ # 
+ # set post_indent_string=""
+ #
+ # Name: post_indent_string
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Similar to the $attribution variable, Mutt will append this
+ # string after the inclusion of a message which is being replied to.
+ # 
+ # 
+ # set postpone=ask-yes
+ #
+ # Name: postpone
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether or not messages are saved in the $postponed
+ # mailbox when you elect not to send immediately.
+ # 
+ # Also see the $recall variable.
+ # 
+ # 
+ # set postponed="~/postponed"
+ #
+ # Name: postponed
+ # Type: path
+ # Default: "~/postponed"
+ # 
+ # 
+ # Mutt allows you to indefinitely ``postpone sending a message'' which
+ # you are editing.  When you choose to postpone a message, Mutt saves it
+ # in the mailbox specified by this variable.
+ # 
+ # Also see the $postpone variable.
+ # 
+ # 
+ # set preconnect=""
+ #
+ # Name: preconnect
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # If set, a shell command to be executed if mutt fails to establish
+ # a connection to the server. This is useful for setting up secure
+ # connections, e.g. with ssh(1). If the command returns a  nonzero
+ # status, mutt gives up opening the server. Example:
+ # set preconnect="ssh -f -q -L 1234:mailhost.net:143 mailhost.net \
+ # sleep 20 < /dev/null > /dev/null"
+ # 
+ # Mailbox ``foo'' on ``mailhost.net'' can now be reached
+ # as ``{localhost:1234}foo''.
+ # 
+ # Note: For this example to work, you must be able to log in to the
+ # remote machine without having to enter a password.
+ # 
+ # 
+ # set print=ask-no
+ #
+ # Name: print
+ # Type: quadoption
+ # Default: ask-no
+ # 
+ # 
+ # Controls whether or not Mutt really prints messages.
+ # This is set to ``ask-no'' by default, because some people
+ # accidentally hit ``p'' often.
+ # 
+ # 
+ # set print_command="lpr"
+ #
+ # Name: print_command
+ # Type: path
+ # Default: "lpr"
+ # 
+ # 
+ # This specifies the command pipe that should be used to print messages.
+ # 
+ # 
+ # set print_decode=yes
+ #
+ # Name: print_decode
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Used in connection with the <print-message> command.  If this
+ # option is set, the message is decoded before it is passed to the
+ # external command specified by $print_command.  If this option
+ # is unset, no processing will be applied to the message when
+ # printing it.  The latter setting may be useful if you are using
+ # some advanced printer filter which is able to properly format
+ # e-mail messages for printing.
+ # 
+ # 
+ # set print_split=no
+ #
+ # Name: print_split
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Used in connection with the <print-message> command.  If this option
+ # is set, the command specified by $print_command is executed once for
+ # each message which is to be printed.  If this option is unset,
+ # the command specified by $print_command is executed only once, and
+ # all the messages are concatenated, with a form feed as the message
+ # separator.
+ # 
+ # Those who use the enscript(1) program's mail-printing mode will
+ # most likely want to set this option.
+ # 
+ # 
+ # set prompt_after=yes
+ #
+ # Name: prompt_after
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If you use an external $pager, setting this variable will
+ # cause Mutt to prompt you for a command when the pager exits rather
+ # than returning to the index menu.  If unset, Mutt will return to the
+ # index menu when the external pager exits.
+ # 
+ # 
+ # set query_command=""
+ #
+ # Name: query_command
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This specifies the command that mutt will use to make external address
+ # queries.  The string should contain a ``%s'', which will be substituted
+ # with the query string the user types.  See ``query'' for more
+ # information.
+ # 
+ # 
+ # set query_format="%4c %t %-25.25a %-25.25n %?e?(%e)?"
+ #
+ # Name: query_format
+ # Type: string
+ # Default: "%4c %t %-25.25a %-25.25n %?e?(%e)?"
+ # 
+ # 
+ # This variable describes the format of the ``query'' menu. The
+ # following printf(3)-style sequences are understood:
+ # %a      destination address
+ # %c      current entry number
+ # %e      extra information *
+ # %n      destination name
+ # %t      ``*'' if current entry is tagged, a space otherwise
+ # %>X     right justify the rest of the string and pad with ``X''
+ # %|X     pad to the end of the line with ``X''
+ # %*X     soft-fill with character ``X'' as pad
+ # 
+ # 
+ # For an explanation of ``soft-fill'', see the $index_format documentation.
+ # 
+ # * = can be optionally printed if nonzero, see the $status_format documentation.
+ # 
+ # 
+ # set quit=yes
+ #
+ # Name: quit
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # This variable controls whether ``quit'' and ``exit'' actually quit
+ # from mutt.  If this option is set, they do quit, if it is unset, they
+ # have no effect, and if it is set to ask-yes or ask-no, you are
+ # prompted for confirmation when you try to quit.
+ # 
+ # 
+ # set quote_regexp="^([ \t]*[|>:}#])+"
+ #
+ # Name: quote_regexp
+ # Type: regular expression
+ # Default: "^([ \t]*[|>:}#])+"
+ # 
+ # 
+ # A regular expression used in the internal pager to determine quoted
+ # sections of text in the body of a message. Quoted text may be filtered
+ # out using the <toggle-quoted> command, or colored according to the
+ # ``color quoted'' family of directives.
+ # 
+ # Higher levels of quoting may be colored differently (``color quoted1'',
+ # ``color quoted2'', etc.). The quoting level is determined by removing
+ # the last character from the matched text and recursively reapplying
+ # the regular expression until it fails to produce a match.
+ # 
+ # Match detection may be overridden by the $smileys regular expression.
+ # 
+ # 
+ # set read_inc=10
+ #
+ # Name: read_inc
+ # Type: number
+ # Default: 10
+ # 
+ # 
+ # If set to a value greater than 0, Mutt will display which message it
+ # is currently on when reading a mailbox or when performing search actions
+ # such as search and limit. The message is printed after
+ # this many messages have been read or searched (e.g., if set to 25, Mutt will
+ # print a message when it is at message 25, and then again when it gets
+ # to message 50).  This variable is meant to indicate progress when
+ # reading or searching large mailboxes which may take some time.
+ # When set to 0, only a single message will appear before the reading
+ # the mailbox.
+ # 
+ # Also see the $write_inc, $net_inc and $time_inc variables and the
+ # ``tuning'' section of the manual for performance considerations.
+ # 
+ # 
+ # set read_only=no
+ #
+ # Name: read_only
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, all folders are opened in read-only mode.
+ # 
+ # 
+ # set realname=""
+ #
+ # Name: realname
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This variable specifies what ``real'' or ``personal'' name should be used
+ # when sending messages.
+ # 
+ # By default, this is the GECOS field from /etc/passwd.  Note that this
+ # variable will not be used when the user has set a real name
+ # in the $from variable.
+ # 
+ # 
+ # set recall=ask-yes
+ #
+ # Name: recall
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # Controls whether or not Mutt recalls postponed messages
+ # when composing a new message.
+ # 
+ # Setting this variable to is not generally useful, and thus not
+ # recommended.
+ # 
+ # Also see $postponed variable.
+ # 
+ # 
+ # set record="~/sent"
+ #
+ # Name: record
+ # Type: path
+ # Default: "~/sent"
+ # 
+ # 
+ # This specifies the file into which your outgoing messages should be
+ # appended.  (This is meant as the primary method for saving a copy of
+ # your messages, but another way to do this is using the ``my_hdr''
+ # command to create a ``Bcc:'' field with your email address in it.)
+ # 
+ # The value of $record is overridden by the $force_name and
+ # $save_name variables, and the ``fcc-hook'' command.
+ # 
+ # 
+ # set reply_regexp="^(re([\\[0-9\\]+])*|aw):[ \t]*"
+ #
+ # Name: reply_regexp
+ # Type: regular expression
+ # Default: "^(re([\\[0-9\\]+])*|aw):[ \t]*"
+ # 
+ # 
+ # A regular expression used to recognize reply messages when threading
+ # and replying. The default value corresponds to the English "Re:" and
+ # the German "Aw:".
+ # 
+ # 
+ # set reply_self=no
+ #
+ # Name: reply_self
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If unset and you are replying to a message sent by you, Mutt will
+ # assume that you want to reply to the recipients of that message rather
+ # than to yourself.
+ # 
+ # Also see the ``alternates'' command.
+ # 
+ # 
+ # set reply_to=ask-yes
+ #
+ # Name: reply_to
+ # Type: quadoption
+ # Default: ask-yes
+ # 
+ # 
+ # If set, when replying to a message, Mutt will use the address listed
+ # in the Reply-to: header as the recipient of the reply.  If unset,
+ # it will use the address in the From: header field instead.  This
+ # option is useful for reading a mailing list that sets the Reply-To:
+ # header field to the list address and you want to send a private
+ # message to the author of a message.
+ # 
+ # 
+ # set resolve=yes
+ #
+ # Name: resolve
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, the cursor will be automatically advanced to the next
+ # (possibly undeleted) message whenever a command that modifies the
+ # current message is executed.
+ # 
+ # 
+ # set reverse_alias=no
+ #
+ # Name: reverse_alias
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable controls whether or not Mutt will display the ``personal''
+ # name from your aliases in the index menu if it finds an alias that
+ # matches the message's sender.  For example, if you have the following
+ # alias:
+ # alias juser abd30425@somewhere.net (Joe User)
+ # 
+ # and then you receive mail which contains the following header:
+ # From: abd30425@somewhere.net
+ # 
+ # It would be displayed in the index menu as ``Joe User'' instead of
+ # ``abd30425@somewhere.net.''  This is useful when the person's e-mail
+ # address is not human friendly.
+ # 
+ # 
+ # set reverse_name=no
+ #
+ # Name: reverse_name
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # It may sometimes arrive that you receive mail to a certain machine,
+ # move the messages to another machine, and reply to some the messages
+ # from there.  If this variable is set, the default From: line of
+ # the reply messages is built using the address where you received the
+ # messages you are replying to if that address matches your
+ # ``alternates''.  If the variable is unset, or the address that would be
+ # used doesn't match your ``alternates'', the From: line will use
+ # your address on the current machine.
+ # 
+ # Also see the ``alternates'' command.
+ # 
+ # 
+ # set reverse_realname=yes
+ #
+ # Name: reverse_realname
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable fine-tunes the behavior of the $reverse_name feature.
+ # When it is set, mutt will use the address from incoming messages as-is,
+ # possibly including eventual real names.  When it is unset, mutt will
+ # override any such real names with the setting of the $realname variable.
+ # 
+ # 
+ # set rfc2047_parameters=no
+ #
+ # Name: rfc2047_parameters
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When this variable is set, Mutt will decode RFC2047-encoded MIME
+ # parameters. You want to set this variable when mutt suggests you
+ # to save attachments to files named like:
+ # =?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=
+ # 
+ # When this variable is set interactively, the change won't be
+ # active until you change folders.
+ # 
+ # Note that this use of RFC2047's encoding is explicitly
+ # prohibited by the standard, but nevertheless encountered in the
+ # wild.
+ # 
+ # Also note that setting this parameter will not have the effect
+ # that mutt generates this kind of encoding.  Instead, mutt will
+ # unconditionally use the encoding specified in RFC2231.
+ # 
+ # 
+ # set save_address=no
+ #
+ # Name: save_address
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, mutt will take the sender's full address when choosing a
+ # default folder for saving a mail. If $save_name or $force_name
+ # is set too, the selection of the Fcc folder will be changed as well.
+ # 
+ # 
+ # set save_empty=yes
+ #
+ # Name: save_empty
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When unset, mailboxes which contain no saved messages will be removed
+ # when closed (the exception is $spoolfile which is never removed).
+ # If set, mailboxes are never removed.
+ # 
+ # Note: This only applies to mbox and MMDF folders, Mutt does not
+ # delete MH and Maildir directories.
+ # 
+ # 
+ # set save_history=0
+ #
+ # Name: save_history
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # This variable controls the size of the history (per category) saved in the
+ # $history_file file.
+ # 
+ # 
+ # set save_name=no
+ #
+ # Name: save_name
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable controls how copies of outgoing messages are saved.
+ # When set, a check is made to see if a mailbox specified by the
+ # recipient address exists (this is done by searching for a mailbox in
+ # the $folder directory with the username part of the
+ # recipient address).  If the mailbox exists, the outgoing message will
+ # be saved to that mailbox, otherwise the message is saved to the
+ # $record mailbox.
+ # 
+ # Also see the $force_name variable.
+ # 
+ # 
+ # set score=yes
+ #
+ # Name: score
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When this variable is unset, scoring is turned off.  This can
+ # be useful to selectively disable scoring for certain folders when the
+ # $score_threshold_delete variable and related are used.
+ # 
+ # 
+ # set score_threshold_delete=-1
+ #
+ # Name: score_threshold_delete
+ # Type: number
+ # Default: -1
+ # 
+ # 
+ # Messages which have been assigned a score equal to or lower than the value
+ # of this variable are automatically marked for deletion by mutt.  Since
+ # mutt scores are always greater than or equal to zero, the default setting
+ # of this variable will never mark a message for deletion.
+ # 
+ # 
+ # set score_threshold_flag=9999
+ #
+ # Name: score_threshold_flag
+ # Type: number
+ # Default: 9999
+ # 
+ # 
+ # Messages which have been assigned a score greater than or equal to this
+ # variable's value are automatically marked "flagged".
+ # 
+ # 
+ # set score_threshold_read=-1
+ #
+ # Name: score_threshold_read
+ # Type: number
+ # Default: -1
+ # 
+ # 
+ # Messages which have been assigned a score equal to or lower than the value
+ # of this variable are automatically marked as read by mutt.  Since
+ # mutt scores are always greater than or equal to zero, the default setting
+ # of this variable will never mark a message read.
+ # 
+ # 
+ # set search_context=0
+ #
+ # Name: search_context
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # For the pager, this variable specifies the number of lines shown
+ # before search results. By default, search results will be top-aligned.
+ # 
+ # 
+ # set send_charset="us-ascii:iso-8859-1:utf-8"
+ #
+ # Name: send_charset
+ # Type: string
+ # Default: "us-ascii:iso-8859-1:utf-8"
+ # 
+ # 
+ # A colon-delimited list of character sets for outgoing messages. Mutt will use the
+ # first character set into which the text can be converted exactly.
+ # If your $charset is not ``iso-8859-1'' and recipients may not
+ # understand ``UTF-8'', it is advisable to include in the list an
+ # appropriate widely used standard character set (such as
+ # ``iso-8859-2'', ``koi8-r'' or ``iso-2022-jp'') either instead of or after
+ # ``iso-8859-1''.
+ # 
+ # In case the text cannot be converted into one of these exactly,
+ # mutt uses $charset as a fallback.
+ # 
+ # 
+ # set sendmail="/usr/sbin/sendmail -oem -oi"
+ #
+ # Name: sendmail
+ # Type: path
+ # Default: "/usr/sbin/sendmail -oem -oi"
+ # 
+ # 
+ # Specifies the program and arguments used to deliver mail sent by Mutt.
+ # Mutt expects that the specified program interprets additional
+ # arguments as recipient addresses.
+ # 
+ # 
+ # set sendmail_wait=0
+ #
+ # Name: sendmail_wait
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # Specifies the number of seconds to wait for the $sendmail process
+ # to finish before giving up and putting delivery in the background.
+ # 
+ # Mutt interprets the value of this variable as follows:
+ # >0      number of seconds to wait for sendmail to finish before continuing
+ # 0       wait forever for sendmail to finish
+ # <0      always put sendmail in the background without waiting
+ # 
+ # 
+ # Note that if you specify a value other than 0, the output of the child
+ # process will be put in a temporary file.  If there is some error, you
+ # will be informed as to where to find the output.
+ # 
+ # 
+ # set shell=""
+ #
+ # Name: shell
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # Command to use when spawning a subshell.  By default, the user's login
+ # shell from /etc/passwd is used.
+ # 
+ # 
+ # set sig_dashes=yes
+ #
+ # Name: sig_dashes
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set, a line containing ``-- '' (note the trailing space) will be inserted before your
+ # $signature.  It is strongly recommended that you not unset
+ # this variable unless your signature contains just your name.  The
+ # reason for this is because many software packages use ``-- \n'' to
+ # detect your signature.  For example, Mutt has the ability to highlight
+ # the signature in a different color in the built-in pager.
+ # 
+ # 
+ # set sig_on_top=no
+ #
+ # Name: sig_on_top
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, the signature will be included before any quoted or forwarded
+ # text.  It is strongly recommended that you do not set this variable
+ # unless you really know what you are doing, and are prepared to take
+ # some heat from netiquette guardians.
+ # 
+ # 
+ # set signature="~/.signature"
+ #
+ # Name: signature
+ # Type: path
+ # Default: "~/.signature"
+ # 
+ # 
+ # Specifies the filename of your signature, which is appended to all
+ # outgoing messages.   If the filename ends with a pipe (``|''), it is
+ # assumed that filename is a shell command and input should be read from
+ # its standard output.
+ # 
+ # 
+ # set simple_search="~f %s | ~s %s"
+ #
+ # Name: simple_search
+ # Type: string
+ # Default: "~f %s | ~s %s"
+ # 
+ # 
+ # Specifies how Mutt should expand a simple search into a real search
+ # pattern.  A simple search is one that does not contain any of the ``~'' pattern
+ # operators.  See ``patterns'' for more information on search patterns.
+ # 
+ # For example, if you simply type ``joe'' at a search or limit prompt, Mutt
+ # will automatically expand it to the value specified by this variable by
+ # replacing ``%s'' with the supplied string.
+ # For the default value, ``joe'' would be expanded to: ``~f joe | ~s joe''.
+ # 
+ # 
+ # set sleep_time=1
+ #
+ # Name: sleep_time
+ # Type: number
+ # Default: 1
+ # 
+ # 
+ # Specifies time, in seconds, to pause while displaying certain informational
+ # messages, while moving from folder to folder and after expunging
+ # messages from the current folder.  The default is to pause one second, so
+ # a value of zero for this option suppresses the pause.
+ # 
+ # 
+ # set smart_wrap=yes
+ #
+ # Name: smart_wrap
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls the display of lines longer than the screen width in the
+ # internal pager. If set, long lines are wrapped at a word boundary.  If
+ # unset, lines are simply wrapped at the screen edge. Also see the
+ # $markers variable.
+ # 
+ # 
+ # set smileys="(>From )|(:[-^]?[][)(><}{|/DP])"
+ #
+ # Name: smileys
+ # Type: regular expression
+ # Default: "(>From )|(:[-^]?[][)(><}{|/DP])"
+ # 
+ # 
+ # The pager uses this variable to catch some common false
+ # positives of $quote_regexp, most notably smileys and not consider
+ # a line quoted text if it also matches $smileys. This mostly
+ # happens at the beginning of a line.
+ # 
+ # 
+ # set smime_ask_cert_label=yes
+ #
+ # Name: smime_ask_cert_label
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This flag controls whether you want to be asked to enter a label
+ # for a certificate about to be added to the database or not. It is
+ # set by default.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_ca_location=""
+ #
+ # Name: smime_ca_location
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This variable contains the name of either a directory, or a file which
+ # contains trusted certificates for use with OpenSSL.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_certificates=""
+ #
+ # Name: smime_certificates
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
+ # storage and retrieval of keys by itself. This is very basic right
+ # now, and keys and certificates are stored in two different
+ # directories, both named as the hash-value retrieved from
+ # OpenSSL. There is an index file which contains mailbox-address
+ # keyid pairs, and which can be manually edited. This option points to
+ # the location of the certificates.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_decrypt_command=""
+ #
+ # Name: smime_decrypt_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This format string specifies a command which is used to decrypt
+ # application/x-pkcs7-mime attachments.
+ # 
+ # The OpenSSL command formats have their own set of printf(3)-like sequences
+ # similar to PGP's:
+ # %f      Expands to the name of a file containing a message.
+ # %s      Expands to the name of a file containing the signature part
+ #                    of a multipart/signed attachment when verifying it.
+ # %k      The key-pair specified with $smime_default_key
+ # %c      One or more certificate IDs.
+ # %a      The algorithm used for encryption.
+ # %C      CA location:  Depending on whether $smime_ca_location
+ #                    points to a directory or file, this expands to
+ #                    ``-CApath $smime_ca_location'' or ``-CAfile $smime_ca_location''.
+ # 
+ # 
+ # For examples on how to configure these formats, see the smime.rc in
+ # the samples/ subdirectory which has been installed on your system
+ # alongside the documentation.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_decrypt_use_default_key=yes
+ #
+ # Name: smime_decrypt_use_default_key
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set (default) this tells mutt to use the default key for decryption. Otherwise,
+ # if managing multiple certificate-key-pairs, mutt will try to use the mailbox-address
+ # to determine the key to use. It will ask you to supply a key, if it can't find one.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_default_key=""
+ #
+ # Name: smime_default_key
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This is the default key-pair to use for signing. This must be set to the
+ # keyid (the hash-value that OpenSSL generates) to work properly
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_encrypt_command=""
+ #
+ # Name: smime_encrypt_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to create encrypted S/MIME messages.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_encrypt_with=""
+ #
+ # Name: smime_encrypt_with
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This sets the algorithm that should be used for encryption.
+ # Valid choices are ``des'', ``des3'', ``rc2-40'', ``rc2-64'', ``rc2-128''.
+ # If unset, ``3des'' (TripleDES) is used.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_get_cert_command=""
+ #
+ # Name: smime_get_cert_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to extract X509 certificates from a PKCS7 structure.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_get_cert_email_command=""
+ #
+ # Name: smime_get_cert_email_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to extract the mail address(es) used for storing
+ # X509 certificates, and for verification purposes (to check whether the
+ # certificate was issued for the sender's mailbox).
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_get_signer_cert_command=""
+ #
+ # Name: smime_get_signer_cert_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to extract only the signers X509 certificate from a S/MIME
+ # signature, so that the certificate's owner may get compared to the
+ # email's ``From:'' field.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_import_cert_command=""
+ #
+ # Name: smime_import_cert_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to import a certificate via smime_keys.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_is_default=no
+ #
+ # Name: smime_is_default
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # The default behavior of mutt is to use PGP on all auto-sign/encryption
+ # operations. To override and to use OpenSSL instead this must be set.
+ # However, this has no effect while replying, since mutt will automatically
+ # select the same application that was used to sign/encrypt the original
+ # message.  (Note that this variable can be overridden by unsetting $crypt_autosmime.)
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_keys=""
+ #
+ # Name: smime_keys
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
+ # storage and retrieval of keys/certs by itself. This is very basic right now,
+ # and stores keys and certificates in two different directories, both
+ # named as the hash-value retrieved from OpenSSL. There is an index file
+ # which contains mailbox-address keyid pair, and which can be manually
+ # edited. This option points to the location of the private keys.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_pk7out_command=""
+ #
+ # Name: smime_pk7out_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to extract PKCS7 structures of S/MIME signatures,
+ # in order to extract the public X509 certificate(s).
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_sign_command=""
+ #
+ # Name: smime_sign_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to created S/MIME signatures of type
+ # multipart/signed, which can be read by all mail clients.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_sign_opaque_command=""
+ #
+ # Name: smime_sign_opaque_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to created S/MIME signatures of type
+ # application/x-pkcs7-signature, which can only be handled by mail
+ # clients supporting the S/MIME extension.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_timeout=300
+ #
+ # Name: smime_timeout
+ # Type: number
+ # Default: 300
+ # 
+ # 
+ # The number of seconds after which a cached passphrase will expire if
+ # not used.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_verify_command=""
+ #
+ # Name: smime_verify_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to verify S/MIME signatures of type multipart/signed.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smime_verify_opaque_command=""
+ #
+ # Name: smime_verify_opaque_command
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This command is used to verify S/MIME signatures of type
+ # application/x-pkcs7-mime.
+ # 
+ # This is a format string, see the $smime_decrypt_command command for
+ # possible printf(3)-like sequences.
+ # (S/MIME only)
+ # 
+ # 
+ # set smtp_authenticators=""
+ #
+ # Name: smtp_authenticators
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # This is a colon-delimited list of authentication methods mutt may
+ # attempt to use to log in to an SMTP server, in the order mutt should
+ # try them.  Authentication methods are any SASL mechanism, e.g.
+ # ``digest-md5'', ``gssapi'' or ``cram-md5''.
+ # This option is case-insensitive. If it is ``unset''
+ # (the default) mutt will try all available methods, in order from
+ # most-secure to least-secure.
+ # 
+ # Example:
+ # set smtp_authenticators="digest-md5:cram-md5"
+ # 
+ # 
+ # set smtp_pass=""
+ #
+ # Name: smtp_pass
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Specifies the password for your SMTP account.  If unset, Mutt will
+ # prompt you for your password when you first send mail via SMTP.
+ # See $smtp_url to configure mutt to send mail via SMTP.
+ # 
+ # Warning: you should only use this option when you are on a
+ # fairly secure machine, because the superuser can read your muttrc even
+ # if you are the only one who can read the file.
+ # 
+ # 
+ # set smtp_url=""
+ #
+ # Name: smtp_url
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Defines the SMTP smarthost where sent messages should relayed for
+ # delivery. This should take the form of an SMTP URL, e.g.:
+ # smtp[s]://[user[:pass]@]host[:port]
+ # 
+ # where ``[...]'' denotes an optional part.
+ # Setting this variable overrides the value of the $sendmail
+ # variable.
+ # 
+ # 
+ # set sort=date
+ #
+ # Name: sort
+ # Type: sort order
+ # Default: date
+ # 
+ # 
+ # Specifies how to sort messages in the ``index'' menu.  Valid values
+ # are:
+ # - date or date-sent
+ # - date-received
+ # - from
+ # - mailbox-order (unsorted)
+ # - score
+ # - size
+ # - spam
+ # - subject
+ # - threads
+ # - to
+ # 
+ # 
+ # You may optionally use the ``reverse-'' prefix to specify reverse sorting
+ # order (example: ``set sort=reverse-date-sent'').
+ # 
+ # 
+ # set sort_alias=alias
+ #
+ # Name: sort_alias
+ # Type: sort order
+ # Default: alias
+ # 
+ # 
+ # Specifies how the entries in the ``alias'' menu are sorted.  The
+ # following are legal values:
+ # - address (sort alphabetically by email address)
+ # - alias (sort alphabetically by alias name)
+ # - unsorted (leave in order specified in .muttrc)
+ # 
+ # 
+ # set sort_aux=date
+ #
+ # Name: sort_aux
+ # Type: sort order
+ # Default: date
+ # 
+ # 
+ # When sorting by threads, this variable controls how threads are sorted
+ # in relation to other threads, and how the branches of the thread trees
+ # are sorted.  This can be set to any value that $sort can, except
+ # ``threads'' (in that case, mutt will just use ``date-sent'').  You can also
+ # specify the ``last-'' prefix in addition to the ``reverse-'' prefix, but ``last-''
+ # must come after ``reverse-''.  The ``last-'' prefix causes messages to be
+ # sorted against its siblings by which has the last descendant, using
+ # the rest of $sort_aux as an ordering.  For instance,
+ # set sort_aux=last-date-received
+ # 
+ # would mean that if a new message is received in a
+ # thread, that thread becomes the last one displayed (or the first, if
+ # you have ``set sort=reverse-threads''.)
+ # 
+ # Note: For reversed $sort
+ # order $sort_aux is reversed again (which is not the right thing to do,
+ # but kept to not break any existing configuration setting).
+ # 
+ # 
+ # set sort_browser=alpha
+ #
+ # Name: sort_browser
+ # Type: sort order
+ # Default: alpha
+ # 
+ # 
+ # Specifies how to sort entries in the file browser.  By default, the
+ # entries are sorted alphabetically.  Valid values:
+ # - alpha (alphabetically)
+ # - date
+ # - size
+ # - unsorted
+ # 
+ # 
+ # You may optionally use the ``reverse-'' prefix to specify reverse sorting
+ # order (example: ``set sort_browser=reverse-date'').
+ # 
+ # 
+ # set sort_re=yes
+ #
+ # Name: sort_re
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable is only useful when sorting by threads with
+ # $strict_threads unset.  In that case, it changes the heuristic
+ # mutt uses to thread messages by subject.  With $sort_re set, mutt will
+ # only attach a message as the child of another message by subject if
+ # the subject of the child message starts with a substring matching the
+ # setting of $reply_regexp.  With $sort_re unset, mutt will attach
+ # the message whether or not this is the case, as long as the
+ # non-$reply_regexp parts of both messages are identical.
+ # 
+ # 
+ # set spam_separator=","
+ #
+ # Name: spam_separator
+ # Type: string
+ # Default: ","
+ # 
+ # 
+ # This variable controls what happens when multiple spam headers
+ # are matched: if unset, each successive header will overwrite any
+ # previous matches value for the spam label. If set, each successive
+ # match will append to the previous, using this variable's value as a
+ # separator.
+ # 
+ # 
+ # set spoolfile=""
+ #
+ # Name: spoolfile
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # If your spool mailbox is in a non-default place where Mutt cannot find
+ # it, you can specify its location with this variable.  Mutt will
+ # initially set this variable to the value of the environment
+ # variable $MAIL or $MAILDIR if either is defined.
+ # 
+ # 
+ # set ssl_ca_certificates_file=""
+ #
+ # Name: ssl_ca_certificates_file
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This variable specifies a file containing trusted CA certificates.
+ # Any server certificate that is signed with one of these CA
+ # certificates is also automatically accepted.
+ # 
+ # Example:
+ # set ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt
+ # 
+ # 
+ # set ssl_client_cert=""
+ #
+ # Name: ssl_client_cert
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # The file containing a client certificate and its associated private
+ # key.
+ # 
+ # 
+ # set ssl_force_tls=no
+ #
+ # Name: ssl_force_tls
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If this variable is set, Mutt will require that all connections
+ # to remote servers be encrypted. Furthermore it will attempt to
+ # negotiate TLS even if the server does not advertise the capability,
+ # since it would otherwise have to abort the connection anyway. This
+ # option supersedes $ssl_starttls.
+ # 
+ # 
+ # set ssl_min_dh_prime_bits=0
+ #
+ # Name: ssl_min_dh_prime_bits
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # This variable specifies the minimum acceptable prime size (in bits)
+ # for use in any Diffie-Hellman key exchange. A value of 0 will use
+ # the default from the GNUTLS library.
+ # 
+ # 
+ # set ssl_starttls=yes
+ #
+ # Name: ssl_starttls
+ # Type: quadoption
+ # Default: yes
+ # 
+ # 
+ # If set (the default), mutt will attempt to use STARTTLS on servers
+ # advertising the capability. When unset, mutt will not attempt to
+ # use STARTTLS regardless of the server's capabilities.
+ # 
+ # 
+ # set ssl_use_sslv2=no
+ #
+ # Name: ssl_use_sslv2
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This variable specifies whether to attempt to use SSLv2 in the
+ # SSL authentication process.
+ # 
+ # 
+ # set ssl_use_sslv3=yes
+ #
+ # Name: ssl_use_sslv3
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable specifies whether to attempt to use SSLv3 in the
+ # SSL authentication process.
+ # 
+ # 
+ # set ssl_use_tlsv1=yes
+ #
+ # Name: ssl_use_tlsv1
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # This variable specifies whether to attempt to use TLSv1 in the
+ # SSL authentication process.
+ # 
+ # 
+ # set ssl_usesystemcerts=yes
+ #
+ # Name: ssl_usesystemcerts
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set to yes, mutt will use CA certificates in the
+ # system-wide certificate store when checking if a server certificate
+ # is signed by a trusted CA.
+ # 
+ # 
+ # set ssl_verify_dates=yes
+ #
+ # Name: ssl_verify_dates
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set (the default), mutt will not automatically accept a server
+ # certificate that is either not yet valid or already expired. You should
+ # only unset this for particular known hosts, using the
+ # <account-hook> function.
+ # 
+ # 
+ # set ssl_verify_host=yes
+ #
+ # Name: ssl_verify_host
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # If set (the default), mutt will not automatically accept a server
+ # certificate whose host name does not match the host used in your folder
+ # URL. You should only unset this for particular known hosts, using
+ # the <account-hook> function.
+ # 
+ # 
+ # set status_chars="-*%A"
+ #
+ # Name: status_chars
+ # Type: string
+ # Default: "-*%A"
+ # 
+ # 
+ # Controls the characters used by the ``%r'' indicator in
+ # $status_format. The first character is used when the mailbox is
+ # unchanged. The second is used when the mailbox has been changed, and
+ # it needs to be resynchronized. The third is used if the mailbox is in
+ # read-only mode, or if the mailbox will not be written when exiting
+ # that mailbox (You can toggle whether to write changes to a mailbox
+ # with the <toggle-write> operation, bound by default to ``%''). The fourth
+ # is used to indicate that the current folder has been opened in attach-
+ # message mode (Certain operations like composing a new mail, replying,
+ # forwarding, etc. are not permitted in this mode).
+ # 
+ # 
+ # set status_format="-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]---(%s/%S)-%>-(%P)---"
+ #
+ # Name: status_format
+ # Type: string
+ # Default: "-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]---(%s/%S)-%>-(%P)---"
+ # 
+ # 
+ # Controls the format of the status line displayed in the ``index''
+ # menu.  This string is similar to $index_format, but has its own
+ # set of printf(3)-like sequences:
+ # %b      number of mailboxes with new mail *
+ # %d      number of deleted messages *
+ # %f      the full pathname of the current mailbox
+ # %F      number of flagged messages *
+ # %h      local hostname
+ # %l      size (in bytes) of the current mailbox *
+ # %L      size (in bytes) of the messages shown
+ #         (i.e., which match the current limit) *
+ # %m      the number of messages in the mailbox *
+ # %M      the number of messages shown (i.e., which match the current limit) *
+ # %n      number of new messages in the mailbox *
+ # %o      number of old unread messages *
+ # %p      number of postponed messages *
+ # %P      percentage of the way through the index
+ # %r      modified/read-only/won't-write/attach-message indicator,
+ #         according to $status_chars
+ # %s      current sorting mode ($sort)
+ # %S      current aux sorting method ($sort_aux)
+ # %t      number of tagged messages *
+ # %u      number of unread messages *
+ # %v      Mutt version string
+ # %V      currently active limit pattern, if any *
+ # %>X     right justify the rest of the string and pad with ``X''
+ # %|X     pad to the end of the line with ``X''
+ # %*X     soft-fill with character ``X'' as pad
+ # 
+ # 
+ # For an explanation of ``soft-fill'', see the $index_format documentation.
+ # 
+ # * = can be optionally printed if nonzero
+ # 
+ # Some of the above sequences can be used to optionally print a string
+ # if their value is nonzero.  For example, you may only want to see the
+ # number of flagged messages if such messages exist, since zero is not
+ # particularly meaningful.  To optionally print a string based upon one
+ # of the above sequences, the following construct is used:
+ # 
+ # %?<sequence_char>?<optional_string>?
+ # 
+ # where sequence_char is a character from the table above, and
+ # optional_string is the string you would like printed if
+ # sequence_char is nonzero.  optional_string may contain
+ # other sequences as well as normal text, but you may not nest
+ # optional strings.
+ # 
+ # Here is an example illustrating how to optionally print the number of
+ # new messages in a mailbox:
+ # 
+ # %?n?%n new messages.?
+ # 
+ # You can also switch between two strings using the following construct:
+ # 
+ # %?<sequence_char>?<if_string>&<else_string>?
+ # 
+ # If the value of sequence_char is non-zero, if_string will
+ # be expanded, otherwise else_string will be expanded.
+ # 
+ # You can force the result of any printf(3)-like sequence to be lowercase
+ # by prefixing the sequence character with an underscore (``_'') sign.
+ # For example, if you want to display the local hostname in lowercase,
+ # you would use: ``%_h''.
+ # 
+ # If you prefix the sequence character with a colon (``:'') character, mutt
+ # will replace any dots in the expansion by underscores. This might be helpful
+ # with IMAP folders that don't like dots in folder names.
+ # 
+ # 
+ # set status_on_top=no
+ #
+ # Name: status_on_top
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Setting this variable causes the ``status bar'' to be displayed on
+ # the first line of the screen rather than near the bottom. If $help
+ # is set, too it'll be placed at the bottom.
+ # 
+ # 
+ # set strict_threads=no
+ #
+ # Name: strict_threads
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # If set, threading will only make use of the ``In-Reply-To'' and
+ # ``References:'' fields when you $sort by message threads.  By
+ # default, messages with the same subject are grouped together in
+ # ``pseudo threads.''. This may not always be desirable, such as in a
+ # personal mailbox where you might have several unrelated messages with
+ # the subjects like ``hi'' which will get grouped together. See also
+ # $sort_re for a less drastic way of controlling this
+ # behavior.
+ # 
+ # 
+ # set suspend=yes
+ #
+ # Name: suspend
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When unset, mutt won't stop when the user presses the terminal's
+ # susp key, usually ``^Z''. This is useful if you run mutt
+ # inside an xterm using a command like ``xterm -e mutt''.
+ # 
+ # 
+ # set text_flowed=no
+ #
+ # Name: text_flowed
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will generate ``format=flowed'' bodies with a content type
+ # of ``text/plain; format=flowed''.
+ # This format is easier to handle for some mailing software, and generally
+ # just looks like ordinary text.  To actually make use of this format's
+ # features, you'll need support in your editor.
+ # 
+ # Note that $indent_string is ignored when this option is set.
+ # 
+ # 
+ # set thorough_search=no
+ #
+ # Name: thorough_search
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Affects the ~b and ~h search operations described in
+ # section ``patterns''.  If set, the headers and body/attachments of
+ # messages to be searched are decoded before searching. If unset,
+ # messages are searched as they appear in the folder.
+ # 
+ # Users searching attachments or for non-ASCII characters should set
+ # this value because decoding also includes MIME parsing/decoding and possible
+ # character set conversions. Otherwise mutt will attempt to match against the
+ # raw message received (for example quoted-printable encoded or with encoded
+ # headers) which may lead to incorrect search results.
+ # 
+ # 
+ # set thread_received=no
+ #
+ # Name: thread_received
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt uses the date received rather than the date sent
+ # to thread messages by subject.
+ # 
+ # 
+ # set tilde=no
+ #
+ # Name: tilde
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, the internal-pager will pad blank lines to the bottom of the
+ # screen with a tilde (``~'').
+ # 
+ # 
+ # set time_inc=0
+ #
+ # Name: time_inc
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # Along with $read_inc, $write_inc, and $net_inc, this
+ # variable controls the frequency with which progress updates are
+ # displayed. It suppresses updates less than $time_inc milliseconds
+ # apart. This can improve throughput on systems with slow terminals,
+ # or when running mutt on a remote system.
+ # 
+ # Also see the ``tuning'' section of the manual for performance considerations.
+ # 
+ # 
+ # set timeout=600
+ #
+ # Name: timeout
+ # Type: number
+ # Default: 600
+ # 
+ # 
+ # When Mutt is waiting for user input either idling in menus or
+ # in an interactive prompt, Mutt would block until input is
+ # present. Depending on the context, this would prevent certain
+ # operations from working, like checking for new mail or keeping
+ # an IMAP connection alive.
+ # 
+ # This variable controls how many seconds Mutt will at most wait
+ # until it aborts waiting for input, performs these operations and
+ # continues to wait for input.
+ # 
+ # A value of zero or less will cause Mutt to never time out.
+ # 
+ # 
+ # set tmpdir=""
+ #
+ # Name: tmpdir
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # This variable allows you to specify where Mutt will place its
+ # temporary files needed for displaying and composing messages.  If
+ # this variable is not set, the environment variable $TMPDIR is
+ # used.  If $TMPDIR is not set then ``/tmp'' is used.
+ # 
+ # 
+ # set to_chars=" +TCFL"
+ #
+ # Name: to_chars
+ # Type: string
+ # Default: " +TCFL"
+ # 
+ # 
+ # Controls the character used to indicate mail addressed to you.  The
+ # first character is the one used when the mail is not addressed to your
+ # address.  The second is used when you are the only
+ # recipient of the message.  The third is when your address
+ # appears in the ``To:'' header field, but you are not the only recipient of
+ # the message.  The fourth character is used when your
+ # address is specified in the ``Cc:'' header field, but you are not the only
+ # recipient.  The fifth character is used to indicate mail that was sent
+ # by you.  The sixth character is used to indicate when a mail
+ # was sent to a mailing-list you subscribe to.
+ # 
+ # 
+ # set tunnel=""
+ #
+ # Name: tunnel
+ # Type: string
+ # Default: ""
+ # 
+ # 
+ # Setting this variable will cause mutt to open a pipe to a command
+ # instead of a raw socket. You may be able to use this to set up
+ # preauthenticated connections to your IMAP/POP3/SMTP server. Example:
+ # set tunnel="ssh -q mailhost.net /usr/local/libexec/imapd"
+ # 
+ # Note: For this example to work you must be able to log in to the remote
+ # machine without having to enter a password.
+ # 
+ # When set, Mutt uses the tunnel for all remote connections.
+ # Please see ``account-hook'' in the manual for how to use different
+ # tunnel commands per connection.
+ # 
+ # 
+ # set uncollapse_jump=no
+ #
+ # Name: uncollapse_jump
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, Mutt will jump to the next unread message, if any,
+ # when the current thread is uncollapsed.
+ # 
+ # 
+ # set use_8bitmime=no
+ #
+ # Name: use_8bitmime
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # Warning: do not set this variable unless you are using a version
+ # of sendmail which supports the -B8BITMIME flag (such as sendmail
+ # 8.8.x) or you may not be able to send mail.
+ # 
+ # When set, Mutt will invoke $sendmail with the -B8BITMIME
+ # flag when sending 8-bit messages to enable ESMTP negotiation.
+ # 
+ # 
+ # set use_domain=yes
+ #
+ # Name: use_domain
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will qualify all local addresses (ones without the
+ # ``@host'' portion) with the value of $hostname.  If unset, no
+ # addresses will be qualified.
+ # 
+ # 
+ # set use_envelope_from=no
+ #
+ # Name: use_envelope_from
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # When set, mutt will set the envelope sender of the message.
+ # If $envelope_from_address is set, it will be used as the sender
+ # address. If unset, mutt will attempt to derive the sender from the
+ # ``From:'' header.
+ # 
+ # Note that this information is passed to sendmail command using the
+ # -f command line switch. Therefore setting this option is not useful
+ # if the $sendmail variable already contains -f or if the
+ # executable pointed to by $sendmail doesn't support the -f switch.
+ # 
+ # 
+ # set use_from=yes
+ #
+ # Name: use_from
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will generate the ``From:'' header field when
+ # sending messages.  If unset, no ``From:'' header field will be
+ # generated unless the user explicitly sets one using the ``my_hdr''
+ # command.
+ # 
+ # 
+ # set use_idn=yes
+ #
+ # Name: use_idn
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will show you international domain names decoded.
+ # Note: You can use IDNs for addresses even if this is unset.
+ # This variable only affects decoding.
+ # 
+ # 
+ # set use_ipv6=yes
+ #
+ # Name: use_ipv6
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, Mutt will look for IPv6 addresses of hosts it tries to
+ # contact.  If this option is unset, Mutt will restrict itself to IPv4 addresses.
+ # Normally, the default should work.
+ # 
+ # 
+ # set user_agent=yes
+ #
+ # Name: user_agent
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will add a ``User-Agent:'' header to outgoing
+ # messages, indicating which version of mutt was used for composing
+ # them.
+ # 
+ # 
+ # set visual=""
+ #
+ # Name: visual
+ # Type: path
+ # Default: ""
+ # 
+ # 
+ # Specifies the visual editor to invoke when the ``~v'' command is
+ # given in the built-in editor.
+ # 
+ # 
+ # set wait_key=yes
+ #
+ # Name: wait_key
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether Mutt will ask you to press a key after an external command
+ # has been invoked by these functions: <shell-escape>,
+ # <pipe-message>, <pipe-entry>, <print-message>,
+ # and <print-entry> commands.
+ # 
+ # It is also used when viewing attachments with ``auto_view'', provided
+ # that the corresponding mailcap entry has a needsterminal flag,
+ # and the external program is interactive.
+ # 
+ # When set, Mutt will always ask for a key. When unset, Mutt will wait
+ # for a key only if the external command returned a non-zero status.
+ # 
+ # 
+ # set weed=yes
+ #
+ # Name: weed
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # When set, mutt will weed headers when displaying, forwarding,
+ # printing, or replying to messages.
+ # 
+ # 
+ # set wrap=0
+ #
+ # Name: wrap
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # When set to a positive value, mutt will wrap text at $wrap characters.
+ # When set to a negative value, mutt will wrap text so that there are $wrap
+ # characters of empty space on the right side of the terminal. Setting it
+ # to zero makes mutt wrap at the terminal width.
+ # 
+ # 
+ # set wrap_headers=78
+ #
+ # Name: wrap_headers
+ # Type: number
+ # Default: 78
+ # 
+ # 
+ # This option specifies the number of characters to use for wrapping
+ # an outgoing message's headers. Allowed values are between 78 and 998
+ # inclusive.
+ # 
+ # Note: This option usually shouldn't be changed. RFC5233
+ # recommends a line length of 78 (the default), so please only change
+ # this setting when you know what you're doing.
+ # 
+ # 
+ # set wrap_search=yes
+ #
+ # Name: wrap_search
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether searches wrap around the end.
+ # 
+ # When set, searches will wrap around the first (or last) item. When
+ # unset, incremental searches will not wrap.
+ # 
+ # 
+ # set wrapmargin=0
+ #
+ # Name: wrapmargin
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # (DEPRECATED) Equivalent to setting $wrap with a negative value.
+ # 
+ # 
+ # set write_bcc=yes
+ #
+ # Name: write_bcc
+ # Type: boolean
+ # Default: yes
+ # 
+ # 
+ # Controls whether mutt writes out the ``Bcc:'' header when preparing
+ # messages to be sent.  Exim users may wish to unset this. If mutt
+ # is set to deliver directly via SMTP (see $smtp_url), this
+ # option does nothing: mutt will never write out the ``Bcc:'' header
+ # in this case.
+ # 
+ # 
+ # set write_inc=10
+ #
+ # Name: write_inc
+ # Type: number
+ # Default: 10
+ # 
+ # 
+ # When writing a mailbox, a message will be printed every
+ # $write_inc messages to indicate progress.  If set to 0, only a
+ # single message will be displayed before writing a mailbox.
+ # 
+ # Also see the $read_inc, $net_inc and $time_inc variables and the
+ # ``tuning'' section of the manual for performance considerations.
+ # 
+ # 
*** mutt-1.5.20-1/imap/imap.c	2013-02-06 16:53:49.826194400 -0500
--- mutt-1.5.20-1-patched/imap/imap.c	2013-02-06 16:41:20.450652300 -0500
***************
*** 1521,1527 ****
  
      imap_munge_mbox_name (munged, sizeof (munged), name);
      snprintf (command, sizeof (command),
! 	      "STATUS %s (UIDNEXT UIDVALIDITY UNSEEN RECENT)", munged);
  
      if (imap_exec (idata, command, IMAP_CMD_QUEUE) < 0)
      {
--- 1521,1527 ----
  
      imap_munge_mbox_name (munged, sizeof (munged), name);
      snprintf (command, sizeof (command),
! 	      "STATUS %s (UIDNEXT UIDVALIDITY UNSEEN RECENT MESSAGES)", munged);
  
      if (imap_exec (idata, command, IMAP_CMD_QUEUE) < 0)
      {
*** mutt-1.5.20-1/imap/command.c	2013-02-06 16:53:49.826194400 -0500
--- mutt-1.5.20-1-patched/imap/command.c	2013-02-06 16:41:20.460652400 -0500
***************
*** 1006,1011 ****
--- 1006,1018 ----
  	     opened */
  	  status->uidnext = oldun;
  
+         /* Added to make the sidebar show the correct numbers */
+         if (status->messages)
+         {
+           inc->msgcount = status->messages;
+           inc->msg_unread = status->unseen;
+         }
+ 
          FREE (&value);
          return;
        }
